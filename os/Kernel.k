-- -*-Fundamental-*-

code Kernel

  -- CSCI 447 - Winter 2021 -  Name: Harry Saliba

-----------------------------  InitializeScheduler  ---------------------------------

  function InitializeScheduler ()
    --
    -- This routine assumes that we are in System mode.  It sets up the
    -- thread scheduler and turns the executing program into "main-thread".
    -- After exit, we can execute "Yield", "Fork", etc.  Upon return, the
    -- main-thread will be executing with interrupts enabled.
    --
      Cleari ()
      print ("Initializing Thread Scheduler...\n")
      readyList = new List [Thread]
      threadsToBeDestroyed = new List [Thread]
      mainThread = new Thread
      mainThread.Init ("main-thread")
      mainThread.status = RUNNING
      idleThread = new Thread
      idleThread.Init ("idle-thread")
      idleThread.Fork (IdleFunction, 0)
      onCpuThread = & mainThread
      currProc = null
      FatalError = FatalError_ThreadVersion       -- Use a routine which prints threadname
      currentInterruptStatus = ENABLED
      Seti ()
    endFunction

-----------------------------  IdleFunction  ---------------------------------

  function IdleFunction (arg: int)
    --
    -- This is the "idle thread", a kernel thread which ensures that the ready
    -- list is never empty.  The idle thread constantly yields to other threads
    -- in an infinite loop.  However, before yielding, it first checks to see if
    -- there are other threads.  If there are no other threads, the idle thread
    -- will execute the "wait" instruction.  The "wait" instruction will enable
    -- interrupts and halt CPU execution until the next interrupt arrives.
    --
      var junk: int
      while true
        junk = SetInterruptsTo (DISABLED)
        if readyList.IsEmpty ()
          Wait ()
        else
          onCpuThread.Yield ()
        endIf
      endWhile
    endFunction

-----------------------------  Run  ---------------------------------

  function Run (nextThread: ptr to Thread)
    --
    -- Begin executing the thread "nextThread", which has already
    -- been removed from the readyList.  The current thread will
    -- be suspended; we assume that its status has already been
    -- changed to READY or BLOCKED.  We assume that interrupts are
    -- DISABLED when called.
    --
    -- This routine is called only from "Thread.Yield" and "Thread.Sleep".
    --
    -- It is allowable for nextThread to be onCpuThread.
    --
      var prevThread, th: ptr to Thread
      prevThread = onCpuThread
      prevThread.CheckOverflow ()
      -- If the previous thread was using the USER registers, save them.
      if prevThread.isUserThread
        SaveUserRegs (&prevThread.userRegs[0])
      endIf
      onCpuThread = nextThread
      nextThread.status = RUNNING
      --print ("SWITCHING from ")
      --print (prevThread.name)
      --print (" to ")
      --print (nextThread.name)
      --print ("\n")
      Switch (prevThread, nextThread)
      --print ("After SWITCH, back in thread ")
      --print (onCpuThread.name)
      --print ("\n")
      while ! threadsToBeDestroyed.IsEmpty ()
        th = threadsToBeDestroyed.Remove()
        threadManager.FreeThread (th)
      endWhile
      -- If the new thread uses the USER registers, restore them.
      if onCpuThread.isUserThread
        currProc = onCpuThread.myProc
        RestoreUserRegs (&onCpuThread.userRegs[0])
        currProc.addrSpace.SetToThisPageTable ()
      else
        currProc = null
      endIf
    endFunction

-----------------------------  PrintReadyList  ---------------------------------

  function PrintReadyList ()
    --
    -- This routine prints the readyList.  It disables interrupts during the
    -- printing to guarantee that the readyList won't change while it is
    -- being printed, which could cause disaster in this routine!
    --
    var oldStatus: int
      oldStatus = SetInterruptsTo (DISABLED)
      print ("Here is the ready list:\n")
      readyList.ApplyToEach (ThreadPrintShort)
      oldStatus = SetInterruptsTo (oldStatus)
    endFunction

-----------------------------  ThreadStartMain  ---------------------------------

  function ThreadStartMain ()
    --
    -- This function is called from the assembly language routine "ThreadStart".
    -- It is the first KPL code each thread will execute, and it will
    -- invoke the thread's "main" function, with interrupts enabled.  If the "main"
    -- function ever returns, this function will terminate this thread.  This
    -- function will never return.
    --
      var
        junk: int
        mainFun: ptr to function (int)
      -- print ("ThreadStartMain...\n")
      junk = SetInterruptsTo (ENABLED)
      mainFun = onCpuThread.initialFunction
      mainFun (onCpuThread.initialArgument)
      ThreadFinish ()
      FatalError ("ThreadFinish should never return")
    endFunction

-----------------------------  ThreadFinish  ---------------------------------

  function ThreadFinish ()
    --
    -- As the last thing to do in this thread, we want to clean up
    -- and reclaim the Thread object.  This method is called as the
    -- last thing the thread does; this is the normal way for a thread
    -- to die.  However, since the thread is still running in this,
    -- we can't actually do the clean up.  So we just make a note
    -- that it is pending.  After the next thread starts (in method "Run")
    -- we'll finish the job.
    --
      var junk: int
      junk = SetInterruptsTo (DISABLED)
      -- print ("Finishing ")
      -- print (onCpuThread.name)
      -- print ("\n")
      threadsToBeDestroyed.AddToEnd (onCpuThread)
      onCpuThread.Sleep ()
      -- Execution will never reach the next instruction
      FatalError ("This thread will never run again")
    endFunction

-----------------------------  FatalError_ThreadVersion  -----------------------

  function FatalError_ThreadVersion (errorMessage: ptr to array of char)
    --
    -- This function will print out the name of the current thread and
    -- the given error message.  Then it will call "RuntimeExit" to
    -- shutdown the system.
    --
      var
        junk: int
      junk = SetInterruptsTo (DISABLED)
      print ("\nFATAL ERROR")
      if onCpuThread    -- In case errors occur before thread initialization
        print (" in ")
        print (onCpuThread.name)
      endIf
      print (": \"")
      print (errorMessage)
      print ("\" -- TERMINATING!\n\n")
      print ("(To find out where execution was when the problem arose, type 'st' at the emulator prompt.)\n")
      RuntimeExit ()
    endFunction

-----------------------------  SetInterruptsTo  ---------------------------------

  function SetInterruptsTo (newStatus: int) returns int
    --
    -- This routine is passed a status (DISABLED or ENABLED).  It
    -- returns the previous interrupt status and sets the interrupt
    -- status to "newStatus".
    --
    -- Since this routine reads and modifies a shared variable
    -- (currentInterruptStatus), there is a danger of this routine
    -- being re-entered.  Therefore, it momentarily will disable
    -- interrupts, to ensure a valid update to this variable.
    --
      var
        oldStat: int
      Cleari ()
      oldStat = currentInterruptStatus
      if newStatus == ENABLED
        currentInterruptStatus = ENABLED
        Seti ()
      else
        currentInterruptStatus = DISABLED
        Cleari ()
      endIf
      return oldStat
    endFunction

-----------------------------  Semaphore  ---------------------------------

  behavior Semaphore
    -- This class provides the following methods:
    --    Up()  ...also known as "V" or "Signal"...
    --         Increment the semaphore count.  Wake up a thread if
    --         there are any waiting.  This operation always executes
    --         quickly and will not suspend the thread.
    --    Down()   ...also known as "P" or "Wait"...
    --         Decrement the semaphore count.  If the count would go
    --         negative, wait for some other thread to do an Up()
    --         first.  Conceptually, the count will never go negative.
    --    Init(initialCount)
    --         Each semaphore must be initialized.  Normally, you should
    --         invoke this method, providing an 'initialCount' of zero.
    --         If the semaphore is initialized with 0, then a Down()
    --         operation before any Up() will wait for the first
    --         Up().  If initialized with i, then it is as if i Up()
    --         operations have been performed already.
    --
    -- NOTE: The user should never look at a semaphore's count since the value
    -- retrieved may be out-of-date, due to other threads performing Up() or
    -- Down() operations since the retrieval of the count.

      ----------  Semaphore . Init  ----------

      method Init (initialCount: int)
          if initialCount < 0
            FatalError ("Semaphore created with initialCount < 0")
          endIf
          count = initialCount
          waitingThreads = new List [Thread]
        endMethod

      ----------  Semaphore . Up  ----------

      method Up ()
          var
            oldIntStat: int
            t: ptr to Thread
          oldIntStat = SetInterruptsTo (DISABLED)
          if count == 0x7fffffff
            FatalError ("Semaphore count overflowed during 'Up' operation")
          endIf
          count = count + 1
          if count <= 0
            t = waitingThreads.Remove ()
            t.status = READY
            readyList.AddToEnd (t)
          endIf
          oldIntStat = SetInterruptsTo (oldIntStat)
        endMethod

      ----------  Semaphore . Down  ----------

      method Down ()
          var
            oldIntStat: int
          oldIntStat = SetInterruptsTo (DISABLED)
          if count == 0x80000000
            FatalError ("Semaphore count underflowed during 'Down' operation")
          endIf
          count = count - 1
          if count < 0
            waitingThreads.AddToEnd (onCpuThread)
            onCpuThread.Sleep ()
          endIf
          oldIntStat = SetInterruptsTo (oldIntStat)
        endMethod

  endBehavior

-----------------------------  Mutex  ---------------------------------

  behavior Mutex
    -- This class provides the following methods:
    --    Lock()
    --         Acquire the mutex if free, otherwise wait until the mutex is
    --         free and then get it.
    --    Unlock()
    --         Release the mutex.  If other threads are waiting, then
    --         wake up the oldest one and give it the lock.
    --    Init()
    --         Each mutex must be initialized.
    --    IsHeldByCurrentThread()
    --         Return TRUE iff the current (invoking) thread holds a lock
    --         on the mutex.

       -----------  Mutex . Init  -----------

       method Init ()
           waitingThreads = new List [Thread]
         endMethod

       -----------  Mutex . Lock  -----------

       method Lock ()
           var
             oldIntStat: int
           if heldBy == onCpuThread
             FatalError ("Attempt to lock a mutex by a thread already holding it")
           endIf
           oldIntStat = SetInterruptsTo (DISABLED)
           if !heldBy
             heldBy = onCpuThread
           else
             waitingThreads.AddToEnd (onCpuThread)
             onCpuThread.Sleep ()
           endIf
           oldIntStat = SetInterruptsTo (oldIntStat)
         endMethod

       -----------  Mutex . Unlock  -----------

       method Unlock ()
           var
             oldIntStat: int
             t: ptr to Thread
           if heldBy != onCpuThread
             FatalError ("Attempt to unlock a mutex by a thread not holding it")
           endIf
           oldIntStat = SetInterruptsTo (DISABLED)
           t = waitingThreads.Remove ()
           if t
             t.status = READY
             readyList.AddToEnd (t)
             heldBy = t
           else
             heldBy = null
           endIf
           oldIntStat = SetInterruptsTo (oldIntStat)
         endMethod

       -----------  Mutex . IsHeldByCurrentThread  -----------

       method IsHeldByCurrentThread () returns bool
           return heldBy == onCpuThread
         endMethod

  endBehavior

-----------------------------  Condition  ---------------------------------

  behavior Condition
    -- This class is used to implement monitors.  Each monitor will have a
    -- mutex lock and one or more condition variables.  The lock ensures that
    -- only one process at a time may execute code in the monitor.  Within the
    -- monitor code, a thread can execute Wait() and Signal() operations
    -- on the condition variables to make sure certain condions are met.
    --
    -- The condition variables here implement "Mesa-style" semantics, which
    -- means that in the time between a Signal() operation and the awakening
    -- and execution of the corrsponding waiting thread, other threads may
    -- have snuck in and run.  The waiting thread should always re-check the
    -- data to ensure that the condition which was signalled is still true.
    --
    -- This class provides the following methods:
    --    Wait(mutex)
    --         This method assumes the mutex has alreasy been locked.
    --         It unlocks it, and goes to sleep waiting for a signal on
    --         this condition.  When the signal is received, this method
    --         re-awakens, re-locks the mutex, and returns.
    --    Signal(mutex)
    --         If there are any threads waiting on this condition, this
    --         method will wake up the oldest and schedule it to run.
    --         However, since this thread holds the mutex and never unlocks
    --         it, the newly awakened thread will be forced to wait before
    --         it can re-acquire the mutex and resume execution.
    --    Broadcast(mutex)
    --         This method is like Signal() except that it wakes up all
    --         threads waiting on this condition, not just the next one.
    --    Init()
    --         Each condition must be initialized.

      ----------  Condition . Init  ----------

      method Init ()
          waitingThreads = new List [Thread]
        endMethod

      ----------  Condition . Wait  ----------

      method Wait (mutex: ptr to Mutex)
          var
            oldIntStat: int
          if ! mutex.IsHeldByCurrentThread ()
            FatalError ("Attempt to wait on condition when mutex is not held")
          endIf
          oldIntStat = SetInterruptsTo (DISABLED)
          mutex.Unlock ()
          waitingThreads.AddToEnd (onCpuThread)
          onCpuThread.Sleep ()
          mutex.Lock ()
          oldIntStat = SetInterruptsTo (oldIntStat)
        endMethod

      ----------  Condition . Signal  ----------

      method Signal (mutex: ptr to Mutex)
          var
            oldIntStat: int
            t: ptr to Thread
          if ! mutex.IsHeldByCurrentThread ()
            FatalError ("Attempt to signal a condition when mutex is not held")
          endIf
          oldIntStat = SetInterruptsTo (DISABLED)
          t = waitingThreads.Remove ()
          if t
            t.status = READY
            readyList.AddToEnd (t)
          endIf
          oldIntStat = SetInterruptsTo (oldIntStat)
        endMethod

      ----------  Condition . Broadcast  ----------

      method Broadcast (mutex: ptr to Mutex)
          var
            oldIntStat: int
            t: ptr to Thread
          if ! mutex.IsHeldByCurrentThread ()
            FatalError ("Attempt to broadcast a condition when lock is not held")
          endIf
          oldIntStat = SetInterruptsTo (DISABLED)
          while true
            t = waitingThreads.Remove ()
            if t == null
              break
            endIf
            t.status = READY
            readyList.AddToEnd (t)
          endWhile
          oldIntStat = SetInterruptsTo (oldIntStat)
        endMethod

  endBehavior

-----------------------------  Thread  ---------------------------------

  behavior Thread

      ----------  Thread . Init  ----------

      method Init (n: String)
        --
        -- Initialize this Thread object, but do not schedule it for
        -- execution yet.
        --
          name = n
          status = JUST_CREATED
          -- The next line initializes the systemStack array, without filling it in.
          *((& systemStack) asPtrTo int) = SYSTEM_STACK_SIZE
          systemStack [0] = STACK_SENTINEL
          systemStack [SYSTEM_STACK_SIZE-1] = STACK_SENTINEL
          stackTop = & (systemStack[SYSTEM_STACK_SIZE-1])
          regs = new array of int { 13 of 0 }
          isUserThread = false
          userRegs = new array of int { 15 of 0 }
        endMethod

      ----------  Thread . Fork  ----------

      method Fork (fun: ptr to function (int), arg: int)
        --
        -- This method will schedule this thread for execution; in other words
        -- it will make it ready to run by adding it to the "ready queue."  This
        -- method is passed a function and a single integer argument.  When the
        -- thread runs, the thread will execute this function on that argument
        -- and then termiante.  This method will return after scheduling this
        -- thread.
        --
          var
            oldIntStat, junk: int
          oldIntStat = SetInterruptsTo (DISABLED)
          -- print ("Forking thread...\n")
          initialFunction = fun
          initialArgument = arg
          stackTop = stackTop - 4
          *(stackTop asPtrTo int) = ThreadStartUp asInteger
          status = READY
          readyList.AddToEnd (self)
          junk = SetInterruptsTo (oldIntStat)
        endMethod

      ----------  Thread . Yield  ----------

      method Yield ()
        --
        -- This method should only be invoked on the current thread.  The
        -- current thread may yield the processor to other threads by
        -- executing:
        --       onCpuThread.Yield ()
        -- This method may be invoked with or without interrupts enabled.
        -- Upon return, the interrupts will be in the same state; however
        -- since other threads are given a chance to run and they may allow
        -- interrupts, interrupts handlers may have been invoked before
        -- this method returns.
        --
          var
            nextTh: ptr to Thread
            oldIntStat, junk: int
          -- ASSERT:
              if self != onCpuThread
                FatalError ("In Yield, self != onCpuThread")
              endIf
          oldIntStat = SetInterruptsTo (DISABLED)
          -- print ("Yielding ")
          -- print (name)
          -- print ("\n")
          nextTh = readyList.Remove ()
          if nextTh
            -- print ("About to run ")
            -- print (nextTh.name)
            -- print ("\n")
            if status == BLOCKED
              FatalError ("Status of current thread should be READY or RUNNING")
            endIf
            status = READY
            readyList.AddToEnd (self)
            Run (nextTh)
          endIf
          junk = SetInterruptsTo (oldIntStat)
        endMethod

      ----------  Thread . Sleep  ----------

      method Sleep ()
        --
        -- This method should only be invoked on the current thread.  It
        -- will set the status of the current thread to BLCOKED and will
        -- will switch to executing another thread.  It is assumed that
        --     (1) Interrupts are disabled before calling this routine, and
        --     (2) The current thread has been placed on some other wait
        --         list (e.g., for a Semaphore) or else the thread will
        --         never get scheduled again.
        --
          var nextTh: ptr to Thread
          -- ASSERT:
              if currentInterruptStatus != DISABLED
                FatalError ("In Sleep, currentInterruptStatus != DISABLED")
              endIf
          -- ASSERT:
              if self != onCpuThread
                FatalError ("In Sleep, self != onCpuThread")
              endIf
          -- print ("Sleeping ")
          -- print (name)
          -- print ("\n")
          status = BLOCKED
          nextTh = readyList.Remove ()
          if nextTh == null
            FatalError ("Ready list should always contain the idle thread")
          endIf
          Run (nextTh)
        endMethod

      ----------  Thread . CheckOverflow  ----------

      method CheckOverflow ()
        --
        -- This method checks to see if this thread has overflowed its
        -- pre-alloted stack space.  WARNING: the approach taken here is only
        -- guaranteed to work "with high probability".
        --
          if systemStack[0] != STACK_SENTINEL
            FatalError ("System stack overflow detected!")
          elseIf systemStack[SYSTEM_STACK_SIZE-1] != STACK_SENTINEL
            FatalError ("System stack underflow detected!")
          endIf
        endMethod

      ----------  Thread . Print  ----------

      method Print ()
        --
        -- Print this object.
        --
          var i: int
              oldStatus: int
	      userPC: int
          oldStatus = SetInterruptsTo (DISABLED)
          print ("  Thread \"")
          print (name)
          print ("\"    (addr of Thread object: ")
          printHex (self asInteger)
          print (")\n")
          print ("    machine state:\n")
          for i = 0 to 12
            print ("      r")
            printInt (i+2)
            print (": ")
            printHex (regs[i])
            print ("   ")
            printInt (regs[i])
            print ("\n")
          endFor
          printHexVar ("    stackTop", stackTop asInteger)
          printHexVar ("    stack starting addr", (& systemStack[0]) asInteger)
          switch status
            case JUST_CREATED:
              print ("    status = JUST_CREATED\n")
              break
            case READY:
              print ("    status = READY\n")
              break
            case RUNNING:
              print ("    status = RUNNING\n")
              break
            case BLOCKED:
              print ("    status = BLOCKED\n")
              break
            case UNUSED:
              print ("    status = UNUSED\n")
              break
            default:
              FatalError ("Bad status in Thread")
          endSwitch
          print ("    is user thread: ")
          printBool (isUserThread)
          nl ()
	  if isUserThread
	      userPC = GetOldUserPCFromSystemStack()
              print ("    user PC: ") printHex(userPC) nl()
              print ("    user registers:\n")
              for i = 0 to 14
                print ("      r")
            	printInt (i+1)
            	print (": ")
            	printHex (userRegs[i])
            	print ("   ")
            	printInt (userRegs[i])
            	print ("\n")
              endFor
          endIf
          oldStatus = SetInterruptsTo (oldStatus)
        endMethod

  endBehavior

-----------------------------  ThreadPrintShort  ---------------------------------

  function ThreadPrintShort (t: ptr to Thread)
    --
    -- This function prints a single line giving the name of thread "t",
    -- its status, and the address of the Thread object itself (which may be
    -- helpful in distinguishing Threads when the name is not helpful).
    --
      var
        oldStatus: int = SetInterruptsTo (DISABLED)
      if !t
        print ("NULL\n")
        return
      endIf
      print ("  Thread \"")
      print (t.name)
      print ("\"    status=")
      switch t.status
        case JUST_CREATED:
          print ("JUST_CREATED")
          break
        case READY:
          print ("READY")
          break
        case RUNNING:
          print ("RUNNING")
          break
        case BLOCKED:
          print ("BLOCKED")
          break
        case UNUSED:
          print ("UNUSED")
          break
        default:
          FatalError ("Bad status in Thread")
      endSwitch
      print ("    (addr of Thread object: ")
      printHex (t asInteger)
      print (")")
      nl ()
      -- t.Print ()
      oldStatus = SetInterruptsTo (oldStatus)
    endFunction

-----------------------------  ThreadManager  ---------------------------------

  behavior ThreadManager

      ----------  ThreadManager . Init  ----------

      method Init ()
          var
            i: int
        --
        -- This method is called once at kernel startup time to initialize
        -- the one and only "ThreadManager" object.
        -- 
          print ("Initializing Thread Manager...\n")
          -- init free list
          freeList = new List [Thread]
          -- init mutex
          tManMutex = new Mutex
          tManMutex.Init()
          -- init condition
          tManCond = new Condition
          tManCond.Init()
          -- init threads
          threadTable = new array of Thread { MAX_NUMBER_OF_PROCESSES of new Thread }
          -- add all the Thread to the freeList
          for i = 0 to MAX_NUMBER_OF_PROCESSES-1
            threadTable[i].Init("user thread")
            freeList.AddToFront(&threadTable[i])
          endFor
        endMethod

      ----------  ThreadManager . Print  ----------

      method Print ()
        -- 
        -- Print each thread.  Since we look at the freeList, this
        -- routine disables interrupts so the printout will be a
        -- consistent snapshot of things.
        -- 
        var i, oldStatus: int
          oldStatus = SetInterruptsTo (DISABLED)
          print ("Here is the thread table...\n")
          for i = 0 to MAX_NUMBER_OF_PROCESSES-1
            print ("  ")
            printInt (i)
            print (":")
            ThreadPrintShort (&threadTable[i])
          endFor
          print ("Here is the FREE list of Threads:\n   ")
          freeList.ApplyToEach (PrintObjectAddr)
          nl ()
          oldStatus = SetInterruptsTo (oldStatus)
        endMethod

      ----------  ThreadManager . GetANewThread  ----------

      method GetANewThread () returns ptr to Thread
        -- 
        -- This method returns a new Thread; it will wait
        -- until one is available.
        --
        -- TODO: Update status to JUST_CREATED
          var
            newThread: ptr to Thread
          tManMutex.Lock()
          if !freeList.IsEmpty()
            -- just give next thread
            newThread = freeList.Remove()
          else
            while freeList.IsEmpty()
              tManCond.Wait(&tManMutex)
            endWhile
            newThread = freeList.Remove()
          endIf
          newThread.status = JUST_CREATED
          tManMutex.Unlock()
          return newThread
        endMethod

      ----------  ThreadManager . FreeThread  ----------

      method FreeThread (th: ptr to Thread)
        -- 
        -- This method is passed a ptr to a Thread;  It moves it
        -- to the FREE list.
        --
        -- TODO: Update status to UNUSED
          tManMutex.Lock()
            th.status = UNUSED
            freeList.AddToEnd(th)
            -- tManCond.Broadcast(&tManMutex)
            tManCond.Signal(&tManMutex)
          tManMutex.Unlock()
        endMethod

    endBehavior

--------------------------  ProcessControlBlock  ------------------------------


  behavior ProcessControlBlock

      ----------  ProcessControlBlock . Init  ----------
      --
      -- This method is called once for every PCB at startup time.
      --
      method Init ()
          pid = -1
          status = FREE
          addrSpace = new AddrSpace
          addrSpace.Init ()
          fileDescriptor = new array of ptr to OpenFile
                      { MAX_FILES_PER_PROCESS of null }
          workingDir = null
        endMethod

      ----------  ProcessControlBlock . Print  ----------

      method Print ()
        --
        -- Print this ProcessControlBlock using several lines.
        --
        var i: int

          self.PrintShort ()
          addrSpace.Print ()
          print ("    myThread = ")
          ThreadPrintShort (myThread)
          for i = 0 to MAX_FILES_PER_PROCESS-1
            printInt (i) print (": ")
            if fileDescriptor[i]
              fileDescriptor[i].Print ()
            else
              print ("null\n")
            endIf
          endFor
	  if workingDir
	    print (" Working Dir: ") workingDir.Print()
	  endIf
        endMethod

      ----------  ProcessControlBlock . PrintShort  ----------

      method PrintShort ()
        --
        -- Print this ProcessControlBlock on one line.
        --
          print ("  ProcessControlBlock   (addr=")
          printHex (self asInteger)
          print (")   pid=")
          printInt (pid)
          print (", status=")
          if status == ACTIVE
            print ("ACTIVE")
          elseIf status == ZOMBIE
            print ("ZOMBIE")
          elseIf status == FREE
            print ("FREE")
          else
            FatalError ("Bad status in ProcessControlBlock")
          endIf
          print (", parentsPid=")
          printInt (parentsPid)
          print (", exitStatus=")
          printInt (exitStatus)
          nl ()
        endMethod

    endBehavior

-----------------------------  ProcessManager  ---------------------------------

  -- Helper function, Sometimes functions work better than methods.

    -- Methods can not be passed as a parameter, so we must use a function

    function CallStartUserProcess (arg: int)
        processManager.StartUserProcess(arg)
      endFunction

    -- Helper function for ForkNewProcess

    function Finish_Fork_For_Child (userPC:int)
        -- a comment
        var
          oldStatus: int
          initSST: int = 0
        -- disable interrupts
        oldStatus = SetInterruptsTo (DISABLED)
        -- init page table regs
        onCpuThread.myProc.addrSpace.SetToThisPageTable()
        -- copy user regs
        RestoreUserRegs(&onCpuThread.userRegs[0])
        -- set isUserThread to true
        onCpuThread.isUserThread = true
        -- call BecomeUserThread(initStackUserTop, initPC, initSystemStackTop, argPtr)
        -- onCpuThread.Print()
        -- printInt(onCpuThread.systemStack[SYSTEM_STACK_SIZE-1])
        initSST = (&onCpuThread.systemStack[SYSTEM_STACK_SIZE-1]) asInteger
        -- initSST = onCpuThread.userRegs[14]
        BecomeUserThread(onCpuThread.userRegs[14], userPC, initSST, 0)
      endFunction

    -- Helper function for copying arguments from old address space to new
    -- not provided

  behavior ProcessManager

      ----------  ProcessManager . Init  ----------

      method Init ()
        --
        -- This method is called once at kernel startup time to initialize
        -- the one and only "processManager" object.  
        --
          var
            i: int
          print ("Initializing Process Manager...\n")
          -- init the process table array
          processTable = new array of ProcessControlBlock { MAX_NUMBER_OF_PROCESSES of new ProcessControlBlock }
          -- init mutex
          processManagerLock = new Mutex
          processManagerLock.Init()
          -- init conditions
          aProcessBecameFree = new Condition
          aProcessBecameFree.Init()
          aProcessDied = new Condition
          aProcessDied.Init()
          -- init free list
          freeList = new List [ProcessControlBlock]
          for i = 0 to MAX_NUMBER_OF_PROCESSES - 1
            processTable[i].Init()
            freeList.AddToEnd(&processTable[i])
          endFor
          -- init next pid to 1
          nextPid = 1
        endMethod

      ----------  ProcessManager . Print  ----------

      method Print ()
        -- 
        -- Print all processes.  Since we look at the freeList, this
        -- routine disables interrupts so the printout will be a
        -- consistent snapshot of things.
        -- 
        var i, oldStatus: int
          oldStatus = SetInterruptsTo (DISABLED)
          print ("Here is the process table...\n")
          for i = 0 to MAX_NUMBER_OF_PROCESSES-1
            print ("  ")
            printInt (i)
            print (":")
            processTable[i].Print ()
          endFor
          print ("Here is the FREE list of ProcessControlBlocks:\n   ")
          freeList.ApplyToEach (PrintObjectAddr)
          nl ()
          oldStatus = SetInterruptsTo (oldStatus)
        endMethod

      ----------  ProcessManager . PrintShort  ----------

      method PrintShort ()
        -- 
        -- Print all processes.  Since we look at the freeList, this
        -- routine disables interrupts so the printout will be a
        -- consistent snapshot of things.
        -- 
        var i, oldStatus: int
          oldStatus = SetInterruptsTo (DISABLED)
          print ("Here is the process table...\n")
          for i = 0 to MAX_NUMBER_OF_PROCESSES-1
            print ("  ")
            printInt (i)
            processTable[i].PrintShort ()
          endFor
          print ("Here is the FREE list of ProcessControlBlocks:\n   ")
          freeList.ApplyToEach (PrintObjectAddr)
          nl ()
          oldStatus = SetInterruptsTo (oldStatus)
        endMethod

      ----------  ProcessManager . GetANewProcess  ----------

      method GetANewProcess () returns ptr to ProcessControlBlock
        --
        -- This method returns a new ProcessControlBlock; it will wait
        -- until one is available.
        --
          var
            newProcess: ptr to ProcessControlBlock
          processManagerLock.Lock()
          if !freeList.IsEmpty()
            -- just give next process
          else
            while freeList.IsEmpty()
              -- print("waiting for free process") nl()
              -- processManager.Print()
              aProcessBecameFree.Wait(&processManagerLock)
            endWhile
          endIf
          newProcess = freeList.Remove()
          newProcess.pid = nextPid
          nextPid = nextPid + 1
          newProcess.status = ACTIVE
          processManagerLock.Unlock()
          return newProcess
        endMethod

      ----------  ProcessManager . FreeProcess  ----------

      method FreeProcess (p: ptr to ProcessControlBlock)
        --
        -- This method is passed a ptr to a Process;  It moves it
        -- to the FREE list.
        --
          FatalError ("ThAtS iLlEgAl!")
          processManagerLock.Lock()
          p.status = FREE
          freeList.AddToEnd(p)
          -- aProcessBecameFree.Broadcast(&processManagerLock)
          aProcessBecameFree.Signal(&processManagerLock)
          processManagerLock.Unlock()
        endMethod
	
      ----------  ProcessManager . FindProcess  ----------

      method FindProcess (pid: int) returns ptr to ProcessControlBlock
        --
        -- This method finds the process that has this pid
        --
          var
            i: int
          --processManagerLock.Lock()
          -- find dat process
          for i = 0 to MAX_NUMBER_OF_PROCESSES - 1
            if processTable[i].pid == pid
              return &processTable[i]
            endIf
          endFor
          --processManagerLock.Unlock()
	  return null
        endMethod

      ---------- ProcessManager . TurnIntoZombie ------------
      method TurnIntoZombie (p: ptr to ProcessControlBlock)
        --
	-- This method allows a process to turn into a Zombie
	--
          var
            i: int
            parentPCB: ptr to ProcessControlBlock
	  processManagerLock.Lock()
          -- identify all zombie children, return them
          for i = 0 to MAX_NUMBER_OF_PROCESSES - 1
            if processTable[i].status == ZOMBIE && processTable[i].parentsPid == p.pid
              -- die, for real this time
              processTable[i].status = FREE
              freeList.AddToEnd(&processTable[i])
              -- print("a process terminated and returned.") nl()
              aProcessBecameFree.Signal(&processManagerLock)
            endIf
          endFor
          -- are a zombie's child? yes? then die, no? then chill
          -- print("parents id: ") printInt(p.parentsPid) nl()
          parentPCB = processManager.FindProcess(p.parentsPid)
          if parentPCB == null || parentPCB.status == ZOMBIE
            p.status = FREE
            p.pid = -1
            freeList.AddToEnd(p)
            if (freeList.IsEmpty())
              print("THIS IS BAD")
            endIf
            -- print("a process terminated and returned.") nl()
            aProcessBecameFree.Signal(&processManagerLock)
          elseIf parentPCB.status == ACTIVE
            -- printInt(p.pid) print(" became a zombie.") nl()
            p.status = ZOMBIE
            aProcessDied.Broadcast(&processManagerLock)
          endIf
          processManagerLock.Unlock()
        endMethod

      ---------- ProcessManager . WaitForZombie ------------
      method WaitForZombie (proc: ptr to ProcessControlBlock) returns int
        --
	-- This method allows a parent wait for a child to turn
	-- into a Zombie and cleans up a Zombie once found.
	--
          var
            exitVal: int
	  processManagerLock.Lock()
          if proc.status == FREE
            -- print("Yah thats bad") nl()
            processManagerLock.Unlock()
            return 0
          endIf
          while proc.status != ZOMBIE
            aProcessDied.Wait(&processManagerLock)
          endWhile
          exitVal = proc.exitStatus
          if exitVal == -1
             currProc.error = proc.error
          endIf
          proc.status = FREE
          freeList.AddToEnd(proc)
          aProcessBecameFree.Signal(&processManagerLock)
          processManagerLock.Unlock()
	  return exitVal
        endMethod

    -------------------- ProcessManager .  ProcessFinish  --------------------

    method ProcessFinish (exitStatus: int)
      --
      -- This routine is called when a process is to be terminated.  It will
      -- free the resources held by this process and will terminate the
      -- current thread.
      --
        var
          interrupts: int
          oldThread: ptr to Thread
          oldPcb: ptr to ProcessControlBlock
          i: int
        -- printInt(currProc.pid) print(" finishing") nl()
        -- save a pointer to the fd list so we dont loose it
        oldPcb = currProc
        -- save the exit status in the PCB
        currProc.exitStatus = exitStatus
        -- disable interrupts
        interrupts = SetInterruptsTo (DISABLED)
        -- disconnect and return the thread, set myThread and myProcess to null
        currProc.myThread.myProc = null
        oldThread = currProc.myThread
        currProc.myThread = null
        -- threadManager.FreeThread(oldThread)
        -- set user therad to false
        oldThread.isUserThread = false
        -- enable interrupts
        interrupts = SetInterruptsTo (interrupts)
        -- close any open files @TODO
        -- currProc.Print()
        for i = 0 to MAX_FILES_PER_PROCESS - 1
          if oldPcb.fileDescriptor[i] != null
            fileManager.Close(oldPcb.fileDescriptor[i])
          endIf
        endFor
        -- return all frames
        -- print("returning frames") nl()
        frameManager.ReturnAllFrames(&oldPcb.addrSpace)
        -- call TurnIntoZombie
        -- printInt(currProc.pid) print(" turning into zombie") nl()
        processManager.TurnIntoZombie(oldPcb)
        -- call ThreadFinish
        ThreadFinish()
      endMethod


    ------------------- ProcessManager . StartUserProcess ----------------------

    method StartUserProcess (arg : int)
       --
       -- Used in starting the first User Process in this OS
       --
        var
          newProcess: ptr to ProcessControlBlock
          file: ptr to OpenFile
          newPC: int
          oldStatus: int
          initSystemStackTop: int
        newProcess = processManager.GetANewProcess()
        newProcess.myThread = onCpuThread
        onCpuThread.myProc = newProcess
        currProc = newProcess
        -- open exe file using fileSystem.Open()
        file = fileSystem.Open(INIT_NAME, fileSystem.rootDirectory, 0, O_READ)
        -- load executable with OpenFile.LoadExecutable
        newPC = file.LoadExecutable(&newProcess.addrSpace)
        -- close file
        fileManager.Close(file)
        -- set working directory to fileSystem.rootDirectory using NewReference
        newProcess.workingDir = fileSystem.rootDirectory.NewReference()
        -- disable interrupts
        oldStatus = SetInterruptsTo (DISABLED)
        -- init page table regs
        newProcess.addrSpace.SetToThisPageTable()
        -- set isUserThread to true
        onCpuThread.isUserThread = true
        -- call BecomeUserThread(initStackUserTop, initPC, initSystemStackTop, argPtr)
        initSystemStackTop = (&onCpuThread.systemStack[SYSTEM_STACK_SIZE-1]) asInteger
        BecomeUserThread(newProcess.addrSpace.numberOfPages * PAGE_SIZE, newPC, initSystemStackTop, 0)
        -- BecomeUserThread(onCpuThread.userRegs[14], newPC, initSystemStackTop, 0)
      endMethod

    -------------------  ProcessManager . InitFirstProcess ---------------------

    method InitFirstProcess ()
      --
      -- Initialize the first process
      --    ... just get a thread and fork it to use CallStartUserProcess
      --
        var
          newThread: ptr to Thread
        newThread = threadManager.GetANewThread()
        newThread.Init(INIT_NAME)
        newThread.Fork(CallStartUserProcess, 0)
      endMethod


    ------------------  ProcessManager . ForkNewProcess  --------------------

     method ForkNewProcess (userPC: int) returns int
       --
       -- This method makes a complete copy of the current process
       -- The return value is the PID of the new Child process
       --
         var
           newPCB: ptr to ProcessControlBlock
           newThread: ptr to Thread
           --newAddrSpace: ptr to AddrSpace
           i: int
         -- get the PCB
         newPCB = processManager.GetANewProcess()
         -- get the thread
         newThread = threadManager.GetANewThread()
         -- init the PCB
         newPCB.myThread = newThread
         newPCB.parentsPid = currProc.pid
         -- pass a new refrence to the working directory
         newPCB.workingDir = currProc.workingDir.NewReference()
         -- init the thread
         newThread.myProc = newPCB
         newThread.name = "name"
         newThread.status = JUST_CREATED
         -- print("oh sh*t oh f*ck this should be the parents pid: ") printInt(currProc.pid) nl()
         newThread.stackTop = & (newThread.systemStack[SYSTEM_STACK_SIZE-1])
         -- save user regs
         SaveUserRegs(&newThread.userRegs[0])
         -- Don’t forget to copy the fileDescriptor array here...
         for i = 0 to MAX_FILES_PER_PROCESS - 1
           if currProc.fileDescriptor[i] != null
             newPCB.fileDescriptor[i] = currProc.fileDescriptor[i].NewReference()
           endIf
         endFor
         -- copy virtual addr space
         frameManager.GetNewFrames(&newPCB.addrSpace, currProc.addrSpace.numberOfPages)
         for i = 0 to currProc.addrSpace.numberOfPages - 1
           MemoryCopy(newPCB.addrSpace.ExtractFrameAddr(i), currProc.addrSpace.ExtractFrameAddr(i), PAGE_SIZE)
           if currProc.addrSpace.IsWritable(i)
             newPCB.addrSpace.SetWritable(i)
           else
             newPCB.addrSpace.ClearWritable(i)
           endIf
         endFor
         -- send the child off and running
         newThread.Fork(Finish_Fork_For_Child, userPC)
         -- return the PID
         return newPCB.pid
       endMethod

    ------------------  ProcessManager . ExecNewProgram  ------------------

    method ExecNewProgram (newProg: String, args: ptr to array of ptr
                           to array of char)
      --
      -- This Method causes the program in the current to be replaced
      -- with a new program "newProg" if successful.  If not successful
      -- it just returns as a successful call will not return from
      -- this function.
        var
        file: ptr to OpenFile
          newPC: int
          initSystemStackTop: int
          sysFilename: array [2000] of char
          -- sysArgs: ptr to array of ptr to array of char
          junk: int
          newAddrSpace: AddrSpace = new AddrSpace
          argSpace: int
        junk = currProc.addrSpace.GetStringFromVirtual(&sysFilename, newProg asInteger, 2000)

        -- open exe file using fileSystem.Open()
        file = fileSystem.Open(&sysFilename, currProc.workingDir, 0, O_READ)
        if file == null
          currProc.error = E_No_Entry
          return
        endIf
        -- load executable with OpenFile.LoadExecutable
        newAddrSpace.Init()
        newPC = file.LoadExecutable(&newAddrSpace)
        -- close file
        fileManager.Close(file)

        if newPC < 0
          currProc.error = E_No_Entry
          return
        endIf

        --copy args
        argSpace = processManager.CopyExecArgs(args, currProc.addrSpace, newAddrSpace)
        if argSpace < 0
          currProc.error = E_Bad_Address
          return
        endIf

        -- disable interrupts
        junk = SetInterruptsTo (DISABLED)
        -- free old frames
        frameManager.ReturnAllFrames(&currProc.addrSpace)
        -- accept new addrspace
        currProc.addrSpace = newAddrSpace
        -- init page table regs
        currProc.addrSpace.SetToThisPageTable()
        -- set isUserThread to true, just to be sure
        onCpuThread.isUserThread = true
        -- call BecomeUserThread(initStackUserTop, initPC, initSystemStackTop, argPtr)
        initSystemStackTop = (&onCpuThread.systemStack[SYSTEM_STACK_SIZE-1]) asInteger
        BecomeUserThread(newAddrSpace.numberOfPages * PAGE_SIZE - argSpace, newPC, initSystemStackTop, 0)
     endMethod

    ------------------  ProcessManager . CopyExecArgs  ------------------

    method CopyExecArgs(args: ptr to array of ptr to array of char, oldAddrSpace: AddrSpace, newAddrSpace: AddrSpace) returns int
        --
        -- This funciton copies exec arguamnts between virtual memory address and returns the size allocated
        --
        var
          size: int = 0
          junk: int
          i: int
          stack: int = newAddrSpace.numberOfPages * PAGE_SIZE -- place to start copying args
          -- stack: int = 0x6000 -- place to start copying args
          lenOfPtrArr: int -- length of the ptr to array of ptr to char
          ptrToArg: int -- pointer to current arg is onld virtual addr space
          newPtrToArg: int -- new pointer to current arg in new virtual addr space
          lenOfArg: int -- len of current arg
          sizeOfArgs: int = 0 -- running size of strings copied incl. size int and properly 4 byte aligned
          temp: array [100] of char
        --   currArg: int
        -- copy the length of the pointer array to kernal space
        junk = oldAddrSpace.CopyBytesFromVirtual((&lenOfPtrArr) asInteger, args asInteger, 4)
        print("%%% Number of args to copy: ") printInt(lenOfPtrArr) nl()
        -- copy the length of the pointer array to the stack of the new addrspace
        junk = newAddrSpace.CopyBytesToVirtual(stack - size, (&lenOfPtrArr) asInteger, 4)
        print("%%% Starting args at: ") printHex(stack - size) nl()
        size = size + 4
        -- copy each string and its pointer into the new addrspace
        for i = 0 to lenOfPtrArr - 1
          -- copy the pointer to the argument to kernal space
          junk = oldAddrSpace.CopyBytesFromVirtual((&ptrToArg) asInteger, (args) asInteger + 4 + (i * 4), 4)
          print("%%% Pointer to argument ") printInt(i) print(" in old VA is: ") printHex(ptrToArg) nl()
          -- copy the length of the argument to kernal space
          junk = oldAddrSpace.CopyBytesFromVirtual((&lenOfArg) asInteger, ptrToArg, 4)
          print("%%% Size of argument ") printInt(i) print(" is: ") printInt(lenOfArg) nl()
          -- calculate new pointer to argument
          -- MOVED newPtrToArg = (stack) - (4 + (lenOfPtrArr * 4) + sizeOfArgs)
          -- increment size of arg to the next 4 byte boundry
          if lenOfArg % 4 > 0
            sizeOfArgs = sizeOfArgs + 4 + (4 * (lenOfArg / 4 + 1))
            -- calculate new pointer to argument
            newPtrToArg = (stack) - (4 + (lenOfPtrArr * 4) + sizeOfArgs)
            print("%%% Allocated 4 + ") printInt(4 * (lenOfArg / 4 + 1)) print(" bytes.") nl()
            -- copy string to kernal space
            junk = oldAddrSpace.CopyBytesFromVirtual((&temp) asInteger, ptrToArg + 4, 4 * (lenOfArg / 4 + 1))
            -- copy string to new address space
            junk = newAddrSpace.CopyBytesToVirtual(newPtrToArg + 4, (&temp) asInteger, 4 * (lenOfArg / 4 + 1))
          else
            sizeOfArgs = sizeOfArgs + 4 + lenOfArg
            -- calculate new pointer to argument
            newPtrToArg = (stack) - (4 + (lenOfPtrArr * 4) + sizeOfArgs)
            print("%%% Allocated 4 + ") printInt(lenOfArg) print(" bytes.") nl()
            -- copy string to kernal space
            junk = oldAddrSpace.CopyBytesFromVirtual((&temp) asInteger, ptrToArg + 4, lenOfArg)
            -- copy string to new address space
            junk = newAddrSpace.CopyBytesToVirtual(newPtrToArg + 4, (&temp) asInteger, lenOfArg)
          endIf
          print("%%% Pointer to argument ") printInt(i) print(" in new VA is: ") printHex(newPtrToArg) nl()
          -- copy new pointer
          junk = newAddrSpace.CopyBytesToVirtual(stack - size, (&newPtrToArg) asInteger, 4)
          size = size + 4
          -- copy length to new va space
          junk = newAddrSpace.CopyBytesToVirtual(newPtrToArg, (&lenOfArg) asInteger, 4)
        endFor
        size = size + sizeOfArgs
        print("%%% Done copying args, total bytes copied: ") printInt(size) nl()

        -- OLD IMPLEMENTATION:
        -- var
        --   size: int = 0
        --   newVirtAddr: int
        --   newPhysAddr: int
        --   newVirtPage: int
        --   offset: int
        --   i: int
          --pointerArray: ptr to array of ptr to array of char

        -- init the virtual address and physical address at the end of the stack
        -- newVirtAddr = newAddrSpace.numberOfPages * PAGE_SIZE
        -- newVirtPage = newAddrSpace.numberOfPages - 1
        -- newPhysAddr = newAddrSpace.ExtractFrameAddr(newVirtPage)
        -- offset = PAGE_SIZE
        -- newAddrSpace.Print()
        -- print("number of pages:  ") printInt(newAddrSpace.numberOfPages) nl()
        -- print("physical addr + offset:  ") printHex(newPhysAddr + offset) nl()
        -- print("virtual address + offset:  ") printHex(newVirtAddr + offset) nl()

        -- -- copy the pointer array onto stack
        -- *((newPhysAddr + offset) asPtrTo int) = args arraySize
        -- size = size + 4
        -- offset = offset - 4
        -- print("size of args: ") printInt(args arraySize) nl()
        -- for i = 0 to ((args arraySize) - 1)
        --   *((newPhysAddr + offset) asPtrTo int) = args[i] asInteger
        --   print("copying ") printHex(args[i] asInteger) print(" to ") printHex(newPhysAddr + offset) nl()
        --   size = size + 4
        --   offset = offset - 4
        --   if size > 2047
        --     return -1
        --   endIf
        -- endFor


        return size
    endMethod
   endBehavior

-----------------------------  PrintObjectAddr  ---------------------------------

  function PrintObjectAddr (p: ptr to Object)
    --
    -- Print the address of the given object.
    --
      printHex (p asInteger)
      printChar (' ')
    endFunction

-----------------------------  FrameManager  ---------------------------------

  behavior FrameManager

      ----------  FrameManager . Init  ----------

      method Init ()
        --
        -- This method is called once at kernel startup time to initialize
        -- the one and only "frameManager" object.  
        --
        var i: int
          print ("Initializing Frame Manager...\n")
          framesInUse = new BitMap
          framesInUse.Init (NUMBER_OF_PHYSICAL_PAGE_FRAMES)
          numberFreeFrames = NUMBER_OF_PHYSICAL_PAGE_FRAMES
          frameManagerLock = new Mutex
          frameManagerLock.Init ()
          newFramesAvailable = new Condition
          newFramesAvailable.Init ()
          waitingLine = new Condition
          waitingLine.Init()
          -- Check that the area to be used for paging contains zeros.
          -- The BLITZ emulator will initialize physical memory to zero, so
          -- if by chance the size of the kernel has gotten so large that
          -- it runs into the area reserved for pages, we will detect it.
          -- Note: this test is not 100%, but is included nonetheless.
          for i = PHYSICAL_ADDRESS_OF_FIRST_PAGE_FRAME
                   to PHYSICAL_ADDRESS_OF_FIRST_PAGE_FRAME+300
                   by 4
            if 0 != *(i asPtrTo int)
              FatalError ("Kernel code size appears to have grown too large and is overflowing into the frame region")
            endIf
          endFor
        endMethod

      ----------  FrameManager . Print  ----------

      method Print ()
        --
        -- Print which frames are allocated and how many are free.
        --
          frameManagerLock.Lock ()
          print ("FRAME MANAGER:\n")
          printIntVar ("  numberFreeFrames", numberFreeFrames)
          print ("  Here are the frames in use: \n    ")
          framesInUse.Print ()
          frameManagerLock.Unlock ()
        endMethod

      ----------  FrameManager . GetAFrame  ----------

      method GetAFrame () returns int
        --
        -- Allocate a single frame and return its physical address.  If no frames
        -- are currently available, wait until the request can be completed.
        --
          var f, frameAddr: int

          -- Acquire exclusive access to the frameManager data structure...
          frameManagerLock.Lock ()

          -- Wait until we have enough free frames to entirely satisfy the request...
          while numberFreeFrames < 1
            newFramesAvailable.Wait (&frameManagerLock)
          endWhile

          -- Find a free frame and allocate it...
          f = framesInUse.FindZeroAndSet ()
          numberFreeFrames = numberFreeFrames - 1

	  -- print("GetAFrame called, free frames now at ") printInt(numberFreeFrames) nl()

          -- Unlock...
          frameManagerLock.Unlock ()

          -- Compute and return the physical address of the frame...
          frameAddr = PHYSICAL_ADDRESS_OF_FIRST_PAGE_FRAME + (f * PAGE_SIZE)
          -- printHexVar ("GetAFrame returning frameAddr", frameAddr)
          return frameAddr
        endMethod

     ----------  FrameManager . PutAFrame  ----------

      method PutAFrame ( frameAddr: int )
        --
        -- Returns a frame allocated by GetAFrame.
        --
          var
            bitNumber: int
          frameManagerLock.Lock()
          bitNumber = (frameAddr - PHYSICAL_ADDRESS_OF_FIRST_PAGE_FRAME) / PAGE_SIZE
          framesInUse.ClearBit(bitNumber)
          numberFreeFrames = numberFreeFrames + 1
          newFramesAvailable.Signal(&frameManagerLock)
          frameManagerLock.Unlock()
        endMethod


      ----------  FrameManager . GetNewFrames  ----------

      method GetNewFrames (aPageTable: ptr to AddrSpace, numFramesNeeded: int)
        --
        -- Allocate all frames needed for this AddrSpace      
        --
          var
            entry: int = 0
            i: int
            frameAddr: int = 0
          frameManagerLock.Lock()
          numWaiting = numWaiting + 1
          if numWaiting > 1
            waitingLine.Wait(&frameManagerLock)
          endIf
          while numFramesNeeded > numberFreeFrames
            newFramesAvailable.Wait(&frameManagerLock)
          endWhile
          numWaiting = numWaiting - 1
          for entry = 0 to numFramesNeeded - 1
            i = framesInUse.FindZeroAndSet()
            frameAddr = PHYSICAL_ADDRESS_OF_FIRST_PAGE_FRAME + (i * PAGE_SIZE)
            aPageTable.SetFrameAddr(entry, frameAddr)
          endFor
          numberFreeFrames = numberFreeFrames - numFramesNeeded
          waitingLine.Signal(&frameManagerLock)
          aPageTable.numberOfPages = numFramesNeeded
          frameManagerLock.Unlock()
        endMethod

      ----------  FrameManager . ReturnAllFrames  ----------

      method ReturnAllFrames (aPageTable: ptr to AddrSpace)
        -- 
        -- Return all frames in the AddrSpace
        --
          var
            entry: int
            bitNumber: int
            frameAddr: int
            numFramesReturned: int
          frameManagerLock.Lock()
          numFramesReturned = aPageTable.numberOfPages
          for entry = 0 to numFramesReturned - 1
            frameAddr = aPageTable.ExtractFrameAddr(entry)
            bitNumber = (frameAddr - PHYSICAL_ADDRESS_OF_FIRST_PAGE_FRAME) / PAGE_SIZE
            framesInUse.ClearBit(bitNumber)
          endFor
          -- print("Frames returned: ")
          -- printInt(numFramesReturned)
          -- nl()
          numberFreeFrames = numberFreeFrames + numFramesReturned
          -- print("Free Frames: ")
          -- printInt(numberFreeFrames)
          -- nl()
          newFramesAvailable.Signal(&frameManagerLock)
          frameManagerLock.Unlock()
        endMethod

    endBehavior

-----------------------------  AddrSpace  ---------------------------------

  behavior AddrSpace

      ----------  AddrSpace . Init  ----------

      method Init ()
        --
        -- Initialize this object.
        --
          numberOfPages = 0
          pageTable = new array of int { MAX_PAGES_PER_VIRT_SPACE of 0x00000003 }
        endMethod

      ----------  AddrSpace . Print  ----------

      method Print ()
        --
        -- Print this object.
        --
          var i: int
          print ("        addr        entry          Logical    Physical   Undefined Bits  Dirty  Referenced  Writeable  Valid\n")
          print ("     ==========   ==========     ==========  ==========  ==============  =====  ==========  =========  =====\n")
          for i = 0 to numberOfPages-1
            print ("     ")
            printHex ((&pageTable[i]) asInteger)
            print (":  ")
            printHex (pageTable[i])
            print ("     ")
            printHex (i * PAGE_SIZE)   -- Logical address
            print ("  ")
            printHex (self.ExtractFrameAddr (i))       -- Physical address
            print ("    ")
            if self.ExtractUndefinedBits (i) != 0
              printHex (self.ExtractUndefinedBits (i))
            else
              print ("          ")
            endIf
            print ("     ")
            if self.IsDirty (i)
              print ("YES")
            else
              print ("   ")
            endIf
            print ("      ")
            if self.IsReferenced (i)
              print ("YES")
            else
              print ("   ")
            endIf
            print ("         ")
            if self.IsWritable (i)
              print ("YES")
            else
              print ("   ")
            endIf
            print ("      ")
            if self.IsValid (i)
              print ("YES")
            else
              print ("   ")
            endIf
            nl ()
          endFor
        endMethod

      ----------  AddrSpace . ExtractFrameAddr  ----------

      method ExtractFrameAddr (entry: int) returns int
        --
        -- Return the physical address of the frame in the selected page
        -- table entry.
        --
          return (pageTable[entry] & 0xffffe000) 
        endMethod

      ----------  AddrSpace . ExtractUndefinedBits  ----------

      method ExtractUndefinedBits (entry: int) returns int
        --
        -- Return the undefined bits in the selected page table entry.
        --
          return (pageTable[entry] & 0x00001ff0) 
        endMethod

      ----------  AddrSpace . SetFrameAddr  ----------

      method SetFrameAddr (entry: int, frameAddr: int)
        --
        -- Set the physical address of the frame in the selected page
        -- table entry to the value of the argument "frameAddr".
        --
          pageTable[entry] = (pageTable[entry] & 0x00001fff) | frameAddr
        endMethod

      ----------  AddrSpace . IsDirty  ----------

      method IsDirty (entry: int) returns bool
        --
        -- Return true if the selected page table entry is marked "dirty".
        --
          return (pageTable[entry] & 0x00000008) != 0
        endMethod

      ----------  AddrSpace . IsReferenced  ----------

      method IsReferenced (entry: int) returns bool
        --
        -- Return true if the selected page table entry is marked "referenced".
        --
          return (pageTable[entry] & 0x00000004) != 0
        endMethod

      ----------  AddrSpace . IsWritable  ----------

      method IsWritable (entry: int) returns bool
        --
        -- Return true if the selected page table entry is marked "writable".
        --
          return (pageTable[entry] & 0x00000002) != 0
        endMethod

      ----------  AddrSpace . IsValid  ----------

      method IsValid (entry: int) returns bool
        --
        -- Return true if the selected page table entry is marked "valid".
        --
          return (pageTable[entry] & 0x00000001) != 0
        endMethod

      ----------  AddrSpace . SetDirty  ----------

      method SetDirty (entry: int)
        --
        -- Set the selected page table entry's "dirty" bit to 1.
        --
          pageTable[entry] = pageTable[entry] | 0x00000008
        endMethod

      ----------  AddrSpace . SetReferenced  ----------

      method SetReferenced (entry: int)
        --
        -- Set the selected page table entry's "referenced" bit to 1.
        --
          pageTable[entry] = pageTable[entry] | 0x00000004
        endMethod

      ----------  AddrSpace . SetWritable  ----------

      method SetWritable (entry: int)
        --
        -- Set the selected page table entry's "writable" bit to 1.
        --
          pageTable[entry] = pageTable[entry] | 0x00000002
        endMethod

      ----------  AddrSpace . SetValid  ----------

      method SetValid (entry: int)
        --
        -- Set the selected page table entry's "valid" bit to 1.
        --
          pageTable[entry] = pageTable[entry] | 0x00000001
        endMethod

      ----------  AddrSpace . ClearDirty  ----------

      method ClearDirty (entry: int)
        --
        -- Clear the selected page table entry's "dirty" bit.
        --
          pageTable[entry] = pageTable[entry] & ! 0x00000008
        endMethod

      ----------  AddrSpace . ClearReferenced  ----------

      method ClearReferenced (entry: int)
        --
        -- Clear the selected page table entry's "referenced" bit.
        --
          pageTable[entry] = pageTable[entry] & ! 0x00000004
        endMethod

      ----------  AddrSpace . ClearWritable  ----------

      method ClearWritable (entry: int)
        --
        -- Clear the selected page table entry's "writable" bit.
        --
          pageTable[entry] = pageTable[entry] & ! 0x00000002
        endMethod

      ----------  AddrSpace . ClearValid  ----------

      method ClearValid (entry: int)
        --
        -- Clear the selected page table entry's "valid" bit.
        --
          pageTable[entry] = pageTable[entry] & ! 0x00000001
        endMethod

      ----------  AddrSpace . SetToThisPageTable  ----------

      method SetToThisPageTable ()
        --
        -- This method sets the page table registers in the CPU to
        -- point to this page table.  Later, when paging is enabled,
        -- this will become the active virtual address space.
        --
          LoadPageTableRegs ((& pageTable[0]) asInteger, numberOfPages*4)
        endMethod

      ----------  AddrSpace . CopyBytesFromVirtual  ----------

      method CopyBytesFromVirtual (kernelAddr, virtAddr, numBytes: int)
                    returns int
        --
        -- This method copies data from a user's virtual address space
        -- to somewhere in the kernel space.  We assume that the
        -- pages of the virtual address space are resident in
        -- physical page frames.  This routine returns the number of bytes
        -- that were copied; if there was any problem with the virtual
        -- addressed data, it returns -1.
        --
          var copiedSoFar, virtPage, offset, fromAddr: int
          -- print ("CopyBytesFromVirtual called...\n")
          -- printHexVar ("  kernelAddr", kernelAddr)
          -- printHexVar ("  virtAddr", virtAddr)
          -- printIntVar ("  numBytes", numBytes)
          if numBytes == 0
            return 0
          elseIf numBytes < 0
	    currProc.error = E_Bad_Value
            return -1
	  elseIf virtAddr == 0
	    currProc.error = E_Bad_Address
	    return -1
          endIf
          virtPage = virtAddr / PAGE_SIZE
          offset = virtAddr % PAGE_SIZE
          -- printHexVar ("  virtPage", virtPage)
          -- printHexVar ("  offset", offset)
          while true
            if virtPage >= numberOfPages
              -- print ("  Virtual page number is too large!!!\n")
	      currProc.error = E_Bad_Address
              return -1
            endIf
            if ! self.IsValid (virtPage)
              -- print ("  Virtual page is not marked VALID!!!\n")
	      currProc.error = E_Bad_Address
               return -1
            endIf
            fromAddr = self.ExtractFrameAddr (virtPage) + offset
            -- printHexVar ("  Copying bytes from physcial addr", fromAddr)
            while offset < PAGE_SIZE
              -- printHexVar ("  Copying a byte to physcial addr", kernelAddr)
              -- printChar (* (fromAddr asPtrTo char))
              * (kernelAddr asPtrTo char) = * (fromAddr asPtrTo char)
              offset = offset + 1
              kernelAddr = kernelAddr + 1
              fromAddr = fromAddr + 1
              copiedSoFar = copiedSoFar + 1
              if copiedSoFar == numBytes
                return copiedSoFar
              endIf
            endWhile
            virtPage = virtPage + 1
            offset = 0
          endWhile
        endMethod

      ----------  AddrSpace . CopyBytesToVirtual  ----------

      method CopyBytesToVirtual (virtAddr, kernelAddr, numBytes: int)
                    returns int
        --
        -- This method copies data from the kernel's address space to
        -- somewhere in the virtual address space.  We assume that the
        -- pages of the virtual address space are resident in physical
        -- page frames.  This routine returns the number of bytes
        -- that were copied; if there was any problem with the virtual
        -- addressed data, it returns -1.
        --
          var copiedSoFar, virtPage, offset, destAddr: int
          if numBytes == 0
            return 0
          elseIf numBytes < 0
	    currProc.error = E_Bad_Value
            return -1
	  elseIf virtAddr == 0
	    currProc.error = E_Bad_Address
	    return -1
          endIf
          virtPage = virtAddr / PAGE_SIZE
          offset = virtAddr % PAGE_SIZE
          while true
            if (virtPage >= numberOfPages) ||
               (! self.IsValid (virtPage)) ||
               (! self.IsWritable (virtPage))
	      currProc.error = E_Bad_Address
               return -1
            endIf
            destAddr = self.ExtractFrameAddr (virtPage) + offset
            while offset < PAGE_SIZE
              * (destAddr asPtrTo char) = * (kernelAddr asPtrTo char)
              offset = offset + 1
              kernelAddr = kernelAddr + 1
              destAddr = destAddr + 1
              copiedSoFar = copiedSoFar + 1
              if copiedSoFar == numBytes
                return copiedSoFar
              endIf
            endWhile
            virtPage = virtPage + 1
            offset = 0
          endWhile
        endMethod

      ----------  AddrSpace . GetStringFromVirtual  ----------

      method GetStringFromVirtual (kernelAddr: String, virtAddr, maxSize: int) returns int
        --
        -- This method is used to copy a String from virtual space into
        -- a given physical address in the kernel.  The "kernelAddr" should be
        -- a pointer to an "array of char" in the kernel's code.  This method
        -- copies up to "maxSize" characters from approriate page frame to this
        -- to the target array in the kernel.
        --
        -- Note: This method resets the "arraySize" word in the target.  It is
        -- assumed that the target array has enough space; no checking is done.
        -- The caller should supply a "maxSize" telling how many characters may
        -- be safely copied.
        --
        -- If there are problems, then -1 is returned.  Possible problems:
        --       The source array has more than "maxSize" elements
        --       The source page is invalid or out of range
        -- If all okay, then the number of characters copied is returned.
        --
          var sourceSize: int
          -- print ("GetStringFromVirtual called...\n")
          -- printHexVar ("  kernelAddr", kernelAddr asInteger)
          -- printHexVar ("  virtAddr", virtAddr)
          -- printIntVar ("  maxSize", maxSize)
          -- Begin by fetching the source size
          if self.CopyBytesFromVirtual ((&sourceSize) asInteger,
                                        virtAddr,
                                        4) < 4
            return -1
          endIf
          -- printIntVar ("  sourceSize", sourceSize)
          -- Make sure the source size is okay
          if sourceSize > maxSize
            currProc.error = E_Bad_Value  
            return -1
          endIf
          -- Change the size of the destination array
          * (kernelAddr asPtrTo int) = sourceSize
          -- Next, get the characters
          return self.CopyBytesFromVirtual (kernelAddr asInteger + 4,
                                            virtAddr + 4,
                                            sourceSize)
        endMethod

    endBehavior

-----------------------------  TimerInterruptHandler  ---------------------------------

  function TimerInterruptHandler ()
    --
    -- This routine is called when a timer interrupt occurs.  Upon entry,
    -- interrupts are DISABLED.  Upon return, execution will return to
    -- the interrupted process, which necessarily had interrupts ENABLED.
    --
    -- (If you wish to turn time-slicing off, simply disable the call
    -- to "Yield" in the code below.  Threads will then execute until they
    -- call "Yield" explicitly, or until they call "Sleep".)
    --
      currentInterruptStatus = DISABLED
      -- printChar ('_')
      onCpuThread.Yield ()
      currentInterruptStatus = ENABLED
    endFunction

-----------------------------  DiskInterruptHandler  --------------------------

  function DiskInterruptHandler ()
    --
    -- This routine is called when a disk interrupt occurs.  It will
    -- signal the "semToSignalOnCompletion" Semaphore and return to
    -- the interrupted thread.
    --
    -- This is an interrupt handler.  As such, interrupts will be DISABLED
    -- for the duration of its execution.
    --
-- Uncomment this code later...
      -- FatalError ("DISK INTERRUPTS NOT EXPECTED IN PROJECT 3")
      currentInterruptStatus = DISABLED
      -- print ("DiskInterruptHandler invoked!\n")
      if diskDriver.semToSignalOnCompletion
        diskDriver.semToSignalOnCompletion.Up()
      endIf
    endFunction

-----------------------------  SerialInterruptHandler  --------------------------

  function SerialInterruptHandler ()
    --
    -- This routine is called when a serial interrupt occurs.  It will
    -- signal the "semToSignalOnCompletion" Semaphore and return to
    -- the interrupted thread.
    --
    -- This is an interrupt handler.  As such, interrupts will be DISABLED
    -- for the duration of its execution.
    --
      currentInterruptStatus = DISABLED
      if serialDriver.initialized
        serialDriver.serialNeedsAttention.Up()
      endIf
    endFunction
-----------------------------  IllegalInstructionHandler  --------------------------

  function IllegalInstructionHandler ()
    --
    -- This routine is called when an IllegalInstruction exception occurs.  Upon entry,
    -- interrupts are DISABLED.  We should not return to the code that had
    -- the exception.
    --
      currentInterruptStatus = DISABLED
      ErrorInUserProcess ("An IllegalInstruction exception has occured while in user mode")
    endFunction

-----------------------------  ArithmeticExceptionHandler  --------------------------

  function ArithmeticExceptionHandler ()
    --
    -- This routine is called when an ArithmeticException occurs.  Upon entry,
    -- interrupts are DISABLED.  We should not return to the code that had
    -- the exception.
    --
      currentInterruptStatus = DISABLED
      ErrorInUserProcess ("An ArithmeticException exception has occured while in user mode")
    endFunction

-----------------------------  AddressExceptionHandler  --------------------------

  function AddressExceptionHandler (VA: int)
    --
    -- This routine is called when an AddressException occurs.  Upon entry,
    -- interrupts are DISABLED.  We should not return to the code that had
    -- the exception.
    --
      currentInterruptStatus = DISABLED
      printHexVar("Exception Data: Virtual Address", VA)
      ErrorInUserProcess ("An AddressException exception has occured while in user mode")
      -- Print("An AddressException exception has occured while in user mode") nl()
    endFunction

-----------------------------  PageInvalidExceptionHandler  --------------------------

  function PageInvalidExceptionHandler (VA: int)
    --
    -- This routine is called when a PageInvalidException occurs.  Upon entry,
    -- interrupts are DISABLED.  For now, we simply print a message and abort
    -- the thread.
    --
      currentInterruptStatus = DISABLED
      ErrorInUserProcess ("A PageInvalidException exception has occured while in user mode")
    endFunction

-----------------------------  PageReadonlyExceptionHandler  --------------------------

  function PageReadonlyExceptionHandler (VA: int)
    --
    -- This routine is called when a PageReadonlyException occurs.  Upon entry,
    -- interrupts are DISABLED.  For now, we simply print a message and abort
    -- the thread.
    --
      currentInterruptStatus = DISABLED
      ErrorInUserProcess ("A PageReadonlyException exception has occured while in user mode")
    endFunction

-----------------------------  PrivilegedInstructionHandler  --------------------------

  function PrivilegedInstructionHandler ()
    --
    -- This routine is called when a PrivilegedInstruction exception occurs.  Upon entry,
    -- interrupts are DISABLED.  We should not return to the code that had
    -- the exception.
    --
      currentInterruptStatus = DISABLED
      ErrorInUserProcess ("A PrivilegedInstruction exception has occured while in user mode")
    endFunction

-----------------------------  AlignmentExceptionHandler  --------------------------

  function AlignmentExceptionHandler ()
    --
    -- This routine is called when an AlignmentException occurs.  Upon entry,
    -- interrupts are DISABLED.  We should not return to the code that had
    -- the exception.
    --
      currentInterruptStatus = DISABLED
      ErrorInUserProcess ("An AlignmentException exception has occured while in user mode")
    endFunction

-----------------------------  ErrorInUserProcess  --------------------------

  function ErrorInUserProcess (errorMessage: String)
    --
    -- This routine is called when an error has occurred in a user-level
    -- process.  It prints the error message and terminates the process.
    --
      -- print ("\n**********  ")
      print (errorMessage)
      -- print ("  **********\n\n")

      -- Print some information about the offending process...
      if currProc
        -- currProc.Print ()
      else
        print ("  ERROR: currProc is null\n\n")
      endIf
      -- onCpuThread.Print()

      -- Uncomment the following for even more information...
      -- threadManager.Print ()
      -- processManager.Print ()

      -- NOT IMPLEMENTED
      -- FatalError ("ErrorInUserProcess .. needs to be implemented.")
      if onCpuThread.isUserThread
        currProc = onCpuThread.myProc
        currProc.error = E_User_Process
        processManager.ProcessFinish(-1)
      else
        FatalError("Error in user process was called by a thread that wasn't a user thread.")
      endIf
    endFunction

-----------------------------  SyscallTrapHandler  --------------------------

  function SyscallTrapHandler (syscallCodeNum, arg1, arg2, arg3, arg4: int) returns int
    --
    -- This routine is called when a syscall trap occurs.  Upon entry, interrupts
    -- will be DISABLED, paging is disabled, and we will be running in System mode.
    -- Upon return, execution will return to the user mode portion of this
    -- thread, which will have had interrupts ENABLED.
    --
      currentInterruptStatus = DISABLED
      currProc = onCpuThread.myProc
      -- if syscallCodeNum == SYSCALL_FORK
      --   print("Process ") printInt(currProc.pid) print(" called fork.") nl()
      -- elseIf syscallCodeNum == SYSCALL_EXIT
      --   print("Process ") printInt(currProc.pid) print(" called exit.") nl()
      -- endIf
      /*****
      print ("Within SyscallTrapHandler: syscallCodeNum=")
      printInt (syscallCodeNum)
      print (", arg1=")
      printInt (arg1)
      print (", arg2=")
      printInt (arg2)
      print (", arg3=")
      printInt (arg3)
      print (", arg4=")
      printInt (arg4)
      nl ()
      *****/
      -- Error reset
      -- printInt(currProc asInteger)
      if syscallCodeNum == SYSCALL_GETERROR
      	  return currProc.error
      else
          currProc.error = E_No_Error
      endIf
      switch syscallCodeNum
        case SYSCALL_FORK:
          return Handle_Sys_Fork ()
        case SYSCALL_YIELD:
          Handle_Sys_Yield ()
          return 0
        case SYSCALL_EXEC:
          Handle_Sys_Exec (arg1 asPtrTo array of char, 
                           arg2 asPtrTo array of ptr to array of char )
	  return -1
        case SYSCALL_JOIN:
          return Handle_Sys_Join (arg1)
        case SYSCALL_EXIT:
          Handle_Sys_Exit (arg1)
          return 0
        case SYSCALL_OPEN:
          return Handle_Sys_Open (arg1 asPtrTo array of char, arg2, arg3)
        case SYSCALL_READ:
          return Handle_Sys_Read (arg1, arg2 asPtrTo char, arg3)
        case SYSCALL_WRITE:
          return Handle_Sys_Write (arg1, arg2 asPtrTo char, arg3)
        case SYSCALL_SEEK:
          return Handle_Sys_Seek (arg1, arg2)
        case SYSCALL_CLOSE:
          Handle_Sys_Close (arg1)
          return 0
        case SYSCALL_GETPID:
          return currProc.pid
        case SYSCALL_GETPPID:
          return currProc.parentsPid
        case SYSCALL_PIPE:
          return Handle_Sys_Pipe (arg1 asPtrTo array of int)
        case SYSCALL_DUP:
          return Handle_Sys_Dup (arg1)
       case SYSCALL_STAT:
          return Handle_Sys_Stat (arg1 asPtrTo array of char,
	  			  arg2 asPtrTo statInfo)
       case SYSCALL_CHMODE:
         return Handle_Sys_ChMode (arg1 asPtrTo array of char, arg2)
      case SYSCALL_LINK:
         return Handle_Sys_Link (arg1 asPtrTo array of char, arg2 asPtrTo array of char)
       case SYSCALL_UNLINK:
          return Handle_Sys_Unlink (arg1 asPtrTo array of char)
       case SYSCALL_MKDIR:
          return Handle_Sys_Mkdir (arg1 asPtrTo array of char)
       case SYSCALL_RMDIR:
          return Handle_Sys_Rmdir (arg1 asPtrTo array of char)
       case SYSCALL_CHDIR:
          return Handle_Sys_Chdir (arg1 asPtrTo array of char)
        case SYSCALL_OPENDIR:
          return Handle_Sys_OpenDir (arg1 asPtrTo array of char)
       case SYSCALL_READDIR:
          return Handle_Sys_ReadDir (arg1, arg2 asPtrTo dirEntry)
        case SYSCALL_SHUTDOWN:
          Handle_Sys_Shutdown ()
          return 0
	case SYSCALL_GETDISKINFO:
	  return Handle_Sys_GetDiskInfo (arg1 asPtrTo diskInfo)
        default:
          print ("Syscall code = ")
          printInt (syscallCodeNum)
          nl ()
          FatalError ("Unknown syscall code from user thread")
      endSwitch
      return 0
    endFunction


------------------------  Helper Routines for System Calls ---------------------

----------------------------- Not declared in the header -----------------------

  function Valid_User_Pointer ( userPtr: int, size: int, toStore: bool ) returns bool
          var 
            virtPage: int
            offset: int
          if size == 0
            return false
          elseIf size < 0
	    currProc.error = E_Bad_Value
            return false
	  elseIf userPtr == 0
	    currProc.error = E_Bad_Address
	    return false
          endIf
          virtPage = userPtr / PAGE_SIZE
          offset = userPtr % PAGE_SIZE
          while size > 0
            if (virtPage >= currProc.addrSpace.numberOfPages) ||
               (virtPage < 0) ||
               (!currProc.addrSpace.IsValid (virtPage)) ||
               ((!currProc.addrSpace.IsWritable(virtPage)) && toStore)
	      currProc.error = E_Bad_Address
               return false
            endIf
            while offset < PAGE_SIZE
              offset = offset + 1
              size = size - 1
            endWhile
            virtPage = virtPage + 1
            offset = 0
          endWhile
          return true
    endFunction

  function Valid_User_FD ( fdNum: int) returns bool
      if fdNum < MAX_FILES_PER_PROCESS && fdNum > -1 && currProc.fileDescriptor[fdNum] != null
        return true
      endIf
      currProc.error = E_Bad_FD
      return false
    endFunction

  function Get_Open_FD (startAt: int ) returns int
      var
        i: int
      for i = startAt to MAX_FILES_PER_PROCESS - 1
        if currProc.fileDescriptor[i] == null
          return i
        endIf
      endFor
      return -1
    endFunction

-----------------------------  Handle_Sys_GetDiskInfo  -------------------------

  function Handle_Sys_GetDiskInfo (buffPtr: ptr to diskInfo) returns int
    var oldIntStat: int
        oldIntStat = SetInterruptsTo(ENABLED)
    
        if ! Valid_User_Pointer (buffPtr asInteger, 20, false)
           return -1
        endIf

	return fileSystem.GetDiskInfo (buffPtr)
	
      endFunction

-----------------------------  Handle_Sys_Shutdown  --------------------------------

  function Handle_Sys_Shutdown ()
      -- Time to Stop the system!
      print ("Syscall 'Shutdown' was invoked by a user thread\n")
      RuntimeExit ()
    endFunction

-----------------------------  Handle_Sys_Yield  ---------------------------------

  function Handle_Sys_Yield ()
      onCpuThread.Yield()
    endFunction

-----------------------------  Handle_Sys_Exit  ---------------------------------

  function Handle_Sys_Exit (returnStatus: int)
      processManager.ProcessFinish(returnStatus)
      return
    endFunction

-----------------------------  Handle_Sys_Fork  ---------------------------------

  function Handle_Sys_Fork () returns int
      var
        oldPC: int
      -- print("     Handle_Sys_Fork invoked!\n\n")
      oldPC = GetOldUserPCFromSystemStack()
      return processManager.ForkNewProcess(oldPC)
   endFunction


-----------------------------  Handle_Sys_Join  ---------------------------------

  function Handle_Sys_Join (processID: int) returns int
      -- print("     Handle_Sys_Join invoked!\n")
      -- print("     processID = ")
      -- printInt(processID)
      -- nl()
      -- nl()
      var
        childPCB: ptr to ProcessControlBlock
        exitVal: int
      childPCB = processManager.FindProcess(processID)
      if childPCB == null || childPCB.parentsPid != currProc.pid
        -- print("not a child or doesnt exist.") nl()
        currProc.error = E_No_Child
        return -1
      endIf
      exitVal = processManager.WaitForZombie(childPCB)
      return exitVal
    endFunction

-----------------------------  Handle_Sys_Exec  ---------------------------------

 function Handle_Sys_Exec (filename: ptr to array of char, args: ptr to array of ptr to array of char)
      
      if filename == null
        return
      endIf
      processManager.ExecNewProgram(filename, args)
      return
   endFunction

-----------------------------  Handle_Sys_Open  ---------------------------------

  function Handle_Sys_Open (filename: ptr to array of char, flags, mode: int)
           returns int
        var
          ofilename: array [MAX_STRING_SIZE] of char
          fd: int
          junk: int
        if !Valid_User_Pointer(filename asInteger, MAX_STRING_SIZE, false)
          return -1
        endIf
        junk = currProc.addrSpace.CopyBytesFromVirtual((&ofilename) asInteger, filename asInteger, MAX_STRING_SIZE)
        -- call filemanager.open with isDir set to false
        if ofilename arraySize > MAX_STRING_SIZE
          currProc.error = E_Bad_Value
          return -1
        endIf
        -- check if this is an attempt to open the serial device aka "/dev/serial"
        if StrCmp(&ofilename, "/dev/serial") == 0
          -- get a free FD
          fd = Get_Open_FD(0)
          -- make sure there was one to get
          if fd == -1
            currProc.error = E_No_Resource
            return -1
          endIf
          -- just set the fd to point to the serial terminal file
          currProc.fileDescriptor[fd] = &fileManager.serialTerminalFile
        else
          fd = fileManager.Open(&ofilename, flags, mode, false)
        endIf
      return fd
    endFunction

-----------------------------  Handle_Sys_Close  --------------------------------

  function Handle_Sys_Close (fileDesc: int)
      if !Valid_User_FD(fileDesc)
        return
      endIf
      if currProc.fileDescriptor[fileDesc].kind != TERMINAL
        -- close the non-terminal
        fileManager.Close(currProc.fileDescriptor[fileDesc])
      endIf
      currProc.fileDescriptor[fileDesc] = null
    endFunction

-----------------------------  Handle_Sys_Read  ---------------------------------

  function Handle_Sys_Read (fileDesc: int, buffer: ptr to char, sizeInBytes: int)
           returns int
      var
        file: ptr to OpenFile
      if sizeInBytes == 0
        return 0
      elseIf sizeInBytes < 0
        -- print("ERROR: cannot read negative bytes")
        currProc.error = E_Bad_Value
        return -1
      endIf
--       print("chekcking valid user pointer\n")
      if !Valid_User_Pointer(buffer asInteger, sizeInBytes, true)
        currProc.error = E_Bad_Address
        return -1
      endIf
--       print("checking fd\n")
      if !Valid_User_FD(fileDesc)
        return -1
      endIf
--       print("passed both checks\n")
      file = currProc.fileDescriptor[fileDesc]
--       printInt(file.flags) nl()
      if file.flags != O_READ && file.flags != O_RDWR
        currProc.error = E_Permissions
        return -1
      endIf
      -- pick read based on type
      switch file.kind
        case TERMINAL:
          return serialDriver.Read(buffer, sizeInBytes)
        case FILE:
          return fileSystem.ReadFile(file, buffer, sizeInBytes)
        case PIPE:
          return -1
        default:
          FatalError("Unknown File Type in Read")
          return -1
      endSwitch
    endFunction

-----------------------------  Handle_Sys_Write  ---------------------------------

  function Handle_Sys_Write (fileDesc: int, buffer: ptr to char, sizeInBytes: int)
           returns int
      var
        file: ptr to OpenFile
      if sizeInBytes == 0
        return 0
      elseIf sizeInBytes < 0
        -- print("ERROR: cannot read negative bytes")
        currProc.error = E_Bad_Value
        return -1
      endIf
--       print("chekcking valid user pointer\n")
      if !Valid_User_Pointer(buffer asInteger, sizeInBytes, true)
        currProc.error = E_Bad_Address
        return -1
      endIf
--       print("checking fd\n")
      if !Valid_User_FD(fileDesc)
        return -1
      endIf
--       print("passed both checks\n")
      file = currProc.fileDescriptor[fileDesc]
--       printInt(file.flags) nl()
      if file.flags != O_WRITE && file.flags != O_RDWR
        currProc.error = E_Permissions
        return -1
      endIf
      -- check file type
      switch file.kind
        case TERMINAL:
          return serialDriver.Write(buffer, sizeInBytes)
        case FILE:
          return fileSystem.WriteFile(file, buffer, sizeInBytes)
        case PIPE:
          return -1
        default:
          FatalError("Unknown File Type in Write")
          return -1
      endSwitch
   endFunction

-----------------------------  Handle_Sys_Seek  ---------------------------------

  function Handle_Sys_Seek (fileDesc: int, newCurrentPos: int) returns int
      if !Valid_User_FD(fileDesc)
        return -1
      endIf
      return currProc.fileDescriptor[fileDesc].Seek(newCurrentPos)
   endFunction

-----------------------------  Handle_Sys_Pipe  ------------------------------
 
  function Handle_Sys_Pipe (fdArray: ptr to array of int) returns int
      -- NOT IMPLEMENTED
      currProc.error = E_Not_Imp
      return -1
    endFunction

-----------------------------  Handle_Sys_Dup  ------------------------------

  function Handle_Sys_Dup (oldFd: int) returns int
      -- NOT IMPLEMENTED
      currProc.error = E_Not_Imp
      return -1
    endFunction

-----------------------------  Handle_Sys_Stat  -------------------------------

  function Handle_Sys_Stat (filename: ptr to array of char, statBuf: ptr to statInfo) returns int
      var
        fString: array [2000] of char
        junk: int
      if !Valid_User_Pointer(statBuf asInteger, 20, true) || filename == null
        return -1
      endIf
      junk = currProc.addrSpace.CopyBytesFromVirtual((&fString) asInteger, filename asInteger, 2000)
--       junk = fileSystem.Stat(&fString, statBuf)
--       if file == null
--         currProc.error = E_No_Entry
--         return -1
--       endIf
     -- print("     Handle_Sys_Stat invoked!\n")
     -- printHexVar("     filename virtual addr", filename asInteger)
     -- print("     filename = ") print(&fString) print("\n")
     -- print("     statBuf = 0x") printHex (statBuf asInteger) nl() nl()
      return fileSystem.Stat(&fString, statBuf)
    endFunction

-----------------------------  Handle_Sys_Chdir    -------------------------------

  function Handle_Sys_Chdir (filename: ptr to array of char) returns int
      var
        ofilename: array [2000] of char
        junk: int
      if !Valid_User_Pointer(filename asInteger, 2000, false)
        return -1
      endIf
      junk = currProc.addrSpace.CopyBytesFromVirtual((&ofilename) asInteger, filename asInteger, 2000)
      print("     Handle_Sys_Chdir invoked!\n")
      print("     filename virtual addr = ") printHex (filename asInteger) nl()
      print("     filename = ") print(&ofilename) print("\n\n")
      return 800
    endFunction

-----------------------------  Handle_Sys_OpenDir  -------------------------------

  function Handle_Sys_OpenDir (filename: ptr to array of char) returns int
      var
        ofilename: array [2000] of char
        fd: int
        junk: int
      if !Valid_User_Pointer(filename asInteger, 2000, false)
        return -1
      endIf
      junk = currProc.addrSpace.CopyBytesFromVirtual((&ofilename) asInteger, filename asInteger, 2000)
      fd = fileManager.Open(&ofilename, O_READ, 0, true)
      return fd
    endFunction

-----------------------------  Handle_Sys_ReadDir  -------------------------------

  function Handle_Sys_ReadDir (dFd: int, entPtr: ptr to dirEntry) returns int
      if !Valid_User_FD(dFd)
        currProc.error = E_Bad_FD
        return -1
      endIf
      if !Valid_User_Pointer(entPtr asInteger, entSize(255), true)
        return -1
      endIf
      return fileSystem.ReadDir(currProc.fileDescriptor[dFd], entPtr)
    endFunction

-----------------------------  Handle_Sys_ChMode   -------------------------------

  function Handle_Sys_ChMode (filename: ptr to array of char, mode: int) returns int
      -- NOT IMPLEMENTED
      currProc.error = E_Not_Imp
      return -1
    endFunction

-----------------------------  Handle_Sys_Link     -------------------------------

  function Handle_Sys_Link (oldname, newname: ptr to array of char) returns int
      -- NOT IMPLEMENTED
      currProc.error = E_Not_Imp
      return -1
    endFunction

-----------------------------  Handle_Sys_Unlink   -------------------------------

  function Handle_Sys_Unlink (filename: ptr to array of char) returns int
      -- NOT IMPLEMENTED
      currProc.error = E_Not_Imp
      return -1
    endFunction

-----------------------------  Handle_Sys_Mkdir    -------------------------------

  function Handle_Sys_Mkdir (filename: ptr to array of char) returns int
      -- NOT IMPLEMENTED
      currProc.error = E_Not_Imp
      return -1
    endFunction

-----------------------------  Handle_Sys_RmDir    -------------------------------

  function Handle_Sys_Rmdir (filename: ptr to array of char) returns int
      -- NOT IMPLEMENTED
      currProc.error = E_Not_Imp
      return -1
    endFunction

-----------------------------  DiskDriver  ---------------------------------

  const
    DISK_STATUS_BUSY                               = 0x00000000
    DISK_STATUS_OPERATION_COMPLETED_OK             = 0x00000001
    DISK_STATUS_OPERATION_COMPLETED_WITH_ERROR_1   = 0x00000002
    DISK_STATUS_OPERATION_COMPLETED_WITH_ERROR_2   = 0x00000003
    DISK_STATUS_OPERATION_COMPLETED_WITH_ERROR_3   = 0x00000004
    DISK_STATUS_OPERATION_COMPLETED_WITH_ERROR_4   = 0x00000005
    DISK_STATUS_OPERATION_COMPLETED_WITH_ERROR_5   = 0x00000006

    DISK_READ_COMMAND  = 0x00000001
    DISK_WRITE_COMMAND = 0x00000002

  behavior DiskDriver
    --
    -- There is only one instance of this class.  It provides "read" and "write"
    -- methods to transfer data from and to the disk.
    --
    -- In this implementation, all I/O is synchronous.  These methods perform
    -- busy-waiting until the disk operation has completed.

      ----------  DiskDriver . Init  ----------

      method Init ()
          print ("Initializing Disk Driver...\n")
          DISK_STATUS_WORD_ADDRESS = 0x00FFFF08 asPtrTo int
          DISK_COMMAND_WORD_ADDRESS = 0x00FFFF08 asPtrTo int
          DISK_MEMORY_ADDRESS_REGISTER = 0x00FFFF0C asPtrTo int
          DISK_SECTOR_NUMBER_REGISTER = 0x00FFFF10 asPtrTo int
          DISK_SECTOR_COUNT_REGISTER = 0x00FFFF14 asPtrTo int
          semToSignalOnCompletion = null
          semUsedInSynchMethods = new Semaphore
          semUsedInSynchMethods.Init (0)
          diskBusy = new Mutex
          diskBusy.Init ()
        endMethod

      ----------  DiskDriver . SynchReadSector  ----------

      method SynchReadSector  (sectorAddr, numberOfSectors, memoryAddr: int)
        --
        -- This method reads "numberOfSectors" sectors (of PAGE_SIZE bytes each)
        -- from the disk and places the data in memory, starting at "memoryAddr".
        -- It waits until the I/O is complete before returning.
        --
        -- If there is a (simulated) disk hardware failure, then this routine
        -- simply tries again in an infinite loop, until it succeeds.
        --
          -- print ("SynchReadSector called\n")
          -- printIntVar ("  sectorAddr", sectorAddr)
          -- printIntVar ("  numberOfSectors", numberOfSectors)
          -- printHexVar ("  memoryAddr", memoryAddr)
          diskBusy.Lock ()
          while true

            self.StartReadSector  (sectorAddr, numberOfSectors, memoryAddr,
                                   & semUsedInSynchMethods)
            semUsedInSynchMethods.Down ()

            -- Check the return status
            switch * DISK_STATUS_WORD_ADDRESS
              case DISK_STATUS_OPERATION_COMPLETED_OK:
                diskBusy.Unlock ()
                return
              case DISK_STATUS_OPERATION_COMPLETED_WITH_ERROR_1:
                FatalError ("Disk I/O error in SynchReadSector: Memory addr is not page-aligned or sector count is not positive")
              case DISK_STATUS_OPERATION_COMPLETED_WITH_ERROR_2:
                FatalError ("Disk I/O error in SynchReadSector: Attempt to access invalid memory address")
              case DISK_STATUS_OPERATION_COMPLETED_WITH_ERROR_3:
                FatalError ("Disk I/O error in SynchReadSector: Bad sectorAddr or sectorCount specifies non-existant sector")
              case DISK_STATUS_OPERATION_COMPLETED_WITH_ERROR_4:
                -- This case occurs when there is a hard or soft (simulated)
                -- hardware error while performing the disk operation.
                break
              case DISK_STATUS_OPERATION_COMPLETED_WITH_ERROR_5:
                FatalError ("Disk I/O error in SynchReadSector: Bad command word")
              default:
                FatalError ("SynchReadSector: Unexpected status code")
            endSwitch
            -- print ("\n\nIn SynchReadSector: A simulated disk I/O error occurred...\n\n")
          endWhile

        endMethod

      ----------  DiskDriver . StartReadSector  ----------

      method StartReadSector  (sectorAddr, numberOfSectors, memoryAddr: int,
                               readSem: ptr to Semaphore)
        --
        -- This method reads "numberOfSectors" sectors (of PAGE_SIZE bytes each)
        -- from the disk and places the data in memory, starting at "memoryAddr".
        -- The "whoCares" argument is a Semaphore that we will signal after the
        -- I/O operation is complete; if null no thread will be notified.
        --
          -- print ("StartReadSector called\n")
          -- printIntVar ("  sectorAddr", sectorAddr)
          -- printIntVar ("  numberOfSectors", numberOfSectors)
          -- printHexVar ("  memoryAddr", memoryAddr)
          -- printHexVar ("  whoCares", whoCares asInteger)

          -- Save the semaphore
          semToSignalOnCompletion = readSem

          -- Move the parameters to the disk and start the I/O
          * DISK_MEMORY_ADDRESS_REGISTER = memoryAddr
          * DISK_SECTOR_NUMBER_REGISTER = sectorAddr
          * DISK_SECTOR_COUNT_REGISTER = numberOfSectors
          * DISK_COMMAND_WORD_ADDRESS = DISK_READ_COMMAND    -- Starts the I/O
        endMethod

      ----------  DiskDriver . SynchWriteSector  ----------

      method SynchWriteSector  (sectorAddr, numberOfSectors, memoryAddr: int)
        --
        -- This method writes "numberOfSectors" sectors (of PAGE_SIZE bytes each)
        -- to the disk.  It waits until the I/O is complete before returning.
        --
        -- If there is a (simulated) disk hardware failure, then this routine
        -- simply tries again in an infinite loop, until it succeeds.
        --
          -- print ("SynchWriteSector called\n")
          -- printIntVar ("  sectorAddr", sectorAddr)
          -- printIntVar ("  numberOfSectors", numberOfSectors)
          -- printHexVar ("  memoryAddr", memoryAddr)
          diskBusy.Lock ()
          while true
            self.StartWriteSector  (sectorAddr, numberOfSectors, memoryAddr,
                                    & semUsedInSynchMethods)
            semUsedInSynchMethods.Down ()

            -- Check the return status
            switch * DISK_STATUS_WORD_ADDRESS
              case DISK_STATUS_OPERATION_COMPLETED_OK:
                diskBusy.Unlock ()
                return
              case DISK_STATUS_OPERATION_COMPLETED_WITH_ERROR_1:
                FatalError ("Disk I/O error in SynchWriteSector: Memory addr is not page-aligned or sector count is not positive")
              case DISK_STATUS_OPERATION_COMPLETED_WITH_ERROR_2:
                FatalError ("Disk I/O error in SynchWriteSector: Attempt to access invalid memory address")
              case DISK_STATUS_OPERATION_COMPLETED_WITH_ERROR_3:
                FatalError ("Disk I/O error in SynchWriteSector: Bad sectorAddr or sectorCount specifies non-existant sector")
              case DISK_STATUS_OPERATION_COMPLETED_WITH_ERROR_4:
                -- This case occurs when there is a hard or soft (simulated)
                -- hardware error while performing the disk operation.
                break
              case DISK_STATUS_OPERATION_COMPLETED_WITH_ERROR_5:
                FatalError ("Disk I/O error in SynchWriteSector: Bad command word")
              default:
                FatalError ("SynchWriteSector: Unexpected status code")
            endSwitch
            -- print ("\n\nIn SynchWriteSector: A simulated disk I/O error occurred...\n\n")
          endWhile

        endMethod

      ----------  DiskDriver . StartWriteSector  ----------

      method StartWriteSector  (sectorAddr, numberOfSectors, memoryAddr: int,
                                writeSem: ptr to Semaphore)
        --
        -- This method writes "numberOfSectors" sectors (of PAGE_SIZE bytes each)
        -- to the disk.  It returns immediately after starting the I/O.
        --
        -- The "whoCares" argument is a Semaphore that we will signal after the
        -- I/O operation is complete; if null no thread will be notified.
        --
          -- print ("SynchWriteSector called\n")
          -- printIntVar ("  sectorAddr", sectorAddr)
          -- printIntVar ("  numberOfSectors", numberOfSectors)
          -- printHexVar ("  memoryAddr", memoryAddr)

          -- Save the semaphore
          semToSignalOnCompletion = writeSem

          * DISK_MEMORY_ADDRESS_REGISTER = memoryAddr
          * DISK_SECTOR_NUMBER_REGISTER = sectorAddr
          * DISK_SECTOR_COUNT_REGISTER = numberOfSectors
          * DISK_COMMAND_WORD_ADDRESS = DISK_WRITE_COMMAND    -- Starts the I/O
        endMethod

    endBehavior

-----------------------------  FileManager  ---------------------------------

  behavior FileManager

      ----------  FileManager . Init  ----------

      method Init ()
        --
        -- This method is called once at kernel startup time to initialize
        -- the one and only "FileManager" object.  It is passed a pointer
        -- to a frame of memory. 
        --
        var i: int

          print ("Initializing File Manager...\n")
          fileManagerLock = new Mutex
          fileManagerLock.Init ()

          -- Initialize the OpenFile stuff
          openFileFreeList = new List [OpenFile]
          anOpenFileBecameFree = new Condition
          anOpenFileBecameFree.Init ()
          openFileTable = new array of OpenFile
                { MAX_NUMBER_OF_OPEN_FILES of new OpenFile }
          for i = 0 to MAX_NUMBER_OF_OPEN_FILES-1
            openFileFreeList.AddToEnd (&openFileTable[i])
          endFor

          -- Create the special "stdin/stdout" open file
          serialTerminalFile = new OpenFile
          serialTerminalFile.Init(TERMINAL, null, O_RDWR)

          -- Initialize the pipes ...
          pipeList = new List [Pipe]
          pipeTable = new array [MAX_NUMBER_OF_PIPES] of Pipe 
                      { MAX_NUMBER_OF_PIPES of new Pipe }
          for i = 0 to MAX_NUMBER_OF_PIPES-1
             pipeTable[i].Init()
             pipeList.AddToEnd (&pipeTable[i])
          endFor

        endMethod

      ----------  FileManager . Print  ----------

      method Print ()
        var i: int
          fileManagerLock.Lock ()           -- Need lock since we touch freeLists
          print ("Here is the OpenFile table...\n")
          for i = 0 to MAX_NUMBER_OF_OPEN_FILES-1
            print ("  ")
            printInt (i)
            print (":  0x")
            printHex ((& openFileTable[i]) asInteger)
            print (":  ")
            openFileTable[i].Print()
          endFor
          print ("Here is the FREE list of OpenFiles:\n")
          openFileFreeList.ApplyToEach (printOpen)
          fileManagerLock.Unlock ()
        endMethod

      ----------  FileMangger . GetAnOpenFile --------
      
      method GetAnOpenFile (block: bool) returns ptr to OpenFile
        var open: ptr to OpenFile
          fileManagerLock.Lock()
          if openFileFreeList.IsEmpty() && !block
	     fileManagerLock.Unlock()
	     return null
	  endIf
          while openFileFreeList.IsEmpty ()
            anOpenFileBecameFree.Wait (& fileManagerLock)
          endWhile
          open = openFileFreeList.Remove ()
	  open.fcb = null
	  open.pipePtr = null
	  open.numberOfUsers = 0
	  fileManagerLock.Unlock ()
	  return open

        endMethod

       ----------  FileManager . Open  ----------
    
        method Open (localName: String, flags, mode: int, isDir: bool) returns int
            var
              newfd: int
              newfile: ptr to OpenFile
            -- validate flags
            if flags != O_READ && flags != O_WRITE && flags != O_RDWR
        --       print("ERROR: bad flags\n")
              currProc.error = E_Bad_Value
              return -1
            endIf
            -- get an empty file descriptor using Get_Open_FD
            newfd = Get_Open_FD(0)
        --     currProc.Print()
            -- if there are no open slots, return -1
            if newfd == -1
        --       print("ERROR: no fds\n")
              currProc.error = E_No_Resource
              return -1
            endIf
            -- ask filemanger to open the file
            if currProc.workingDir == null
              print("Very bad.\n")
            endIf
            newfile = fileSystem.Open(localName, currProc.workingDir, flags, mode)
            -- check its not null
            if newfile == null
        --       print("ERROR: couldn't open file\n")
              currProc.error = E_No_Entry
              return -1
            endIf
            -- make sure its a file
            if newfile.kind != DIRECTORY && isDir
        --       print("ERROR: mis match dir/file\n")
              currProc.error = E_Not_A_Directory
              return -1
            elseIf newfile.kind != FILE && !isDir
        --       print("ERROR: mis match dir/file\n")
              currProc.error = E_Permissions
              return -1
            endIf
            -- set the entry in the fd table
            currProc.fileDescriptor[newfd] = newfile
            -- retrun the newfd
            return newfd
          endMethod

       ----------  FileManager . Close  ----------

      -- This method is called to close an OpenFile.  If there is a pending
      -- write (i.e., the buffer is dirty) then it is written out first.
      --
      -- The "numberOfUsers" for the OpenFile is decremented and, if zero,
      -- the OpenFile is freed.  If the OpenFile is freed, then the
      -- "numberOfUsers" for the FCB is decremented.  If it too is zero, the
      -- FCB is freed, which is done in the method fcb.Release().
      --
      method Close (open: ptr to OpenFile)
          var fcb: ptr to FileControlBlock
        --   print("Closing a file with ptr: ") printHex(open asInteger) nl()
          if open == & serialTerminalFile
            return
          endIf
          fileManagerLock.Lock()
          fcb = open.fcb
	  if fcb != null
	     fcb.fcbLock.Lock()
             fcb.Flush()
	     fcb.fcbLock.Unlock()
	  endIf
          open.numberOfUsers = open.numberOfUsers - 1
          if open.numberOfUsers <= 0
 	    if fcb != null
               fcb.Release()
	    endIf
	    -- Deal with closing a pipe -- NOT IMPLEMENTED
            openFileFreeList.AddToEnd (open)
            anOpenFileBecameFree.Signal (& fileManagerLock)
           endIf
          fileManagerLock.Unlock()
        endMethod

      ----------  FileManager . Pipe  ----------
      method  Pipe (fdArray: ptr to array of int) returns int
           -- NOT IMPLEMENTED
         return -1

        endMethod

      ----------  FileManager . GetAPipe  ----------

      method GetAPipe () returns ptr to Pipe
          -- NOT IMPLEMENTED
          return null
        endMethod

      ----------  FileManager . PutAPipe  ----------

      method PutAPipe (pipePtr: ptr to Pipe)
           -- NOT IMPLEMENTED
        endMethod

    endBehavior

  function copyUnalignedWord (destPtr, fromPtr: ptr to int)
      var from, dest: ptr to char
      from = fromPtr asPtrTo char
      dest = destPtr asPtrTo char
      *dest = *from
      *(dest+1) = *(from+1)
      *(dest+2) = *(from+2)
      *(dest+3) = *(from+3)
    endFunction

  function printFCB (fcb: ptr to FileControlBlock)
      printInt (fcb.inode.number)
      printChar (' ')
    endFunction

  function printOpen (open: ptr to OpenFile)
      print ("  0x")
      printHex (open asInteger)
      print (":  ")
      open.Print ()
    endFunction

-----------------------------  ToyFs         --------------------------------

  behavior ToyFs

      --------------- ToyFs . Init  ----------------

      method Init()
        var
            p: ptr to int
	    i: int

          -- Initialize the FileControlBlock stuff -- Must be done first 
          fcbFreeList = new List [FileControlBlock]
          anFCBBecameFree = new Condition
          anFCBBecameFree.Init ()
          fcbTable = new array of FileControlBlock
                { MAX_NUMBER_OF_FILE_CONTROL_BLOCKS of new FileControlBlock }
          for i = 0 to MAX_NUMBER_OF_FILE_CONTROL_BLOCKS-1
            fcbTable[i].Init()
	    fcbTable[i].inode.Init()
            fcbFreeList.AddToEnd (&fcbTable[i])
          endFor

          -- Get a frame for inode manipulations and initialize the lock
	  inodeBuffer = frameManager.GetAFrame ()
	  inodeBuffSec = -1
 	  fsLock = new Mutex
	  fsLock.Init ()

          -- Read in sector 0 from the disk.  This is the super bloc,
 	  superBlock = frameManager.GetAFrame ()
          diskDriver.SynchReadSector (0,    -- sector to read
                                      1,    -- number of sectors to read
                                      superBlock)
	  p = superBlock asPtrTo int

          if *p != 0x54794673 -- "TyFs", the ToyFs magic number
            FatalError ("Magic number in sector 0 of ToyFs file system is bad")
          endIf

	  -- Get file system parameters
	  p = p+4
	  fssize = *p
	  p = p+4
          numInodes = *p
	  numDblocks = fssize - numInodes/128 - 1

	  --print ("super: fssize: ")  printInt (fssize)
          --print (" inodes: ") printInt (numInodes)
	  --print (" dblocks: ") printInt (numDblocks)
          --print ("\n")

	  -- Skip over unused integer
	  p = p+8
	  i_bitmap = new BitMap
	  i_bitmap.InitFromPtr(numInodes+1, p asPtrTo array of int)
	  --print ("inode ") i_bitmap.Print()

	  -- Move over i_bitmap
          p = p + *p*4 + 4
	  d_bitmap = new BitMap
	  d_bitmap.InitFromPtr(numDblocks+1, p asPtrTo array of int)
	  --printIntVar("dbit map size: ", numDblocks)
	  --print ("data ") d_bitmap.Print()

	  -- offset for data sectors
	  fileSystem.dataSecOffset =  numInodes / INODES_PER_SEC
	  --printIntVar ("dataSecOffset: ", fileSystem.dataSecOffset)

	  -- Create the Root Directory
	  rootDirectory = null
	  rootDirectory = fileSystem.Open("/",null,O_READ,0)
	  rootDirectory.kind = DIRECTORY

        endMethod

      --------------- ToyFs . SaveSuper  ----------------
    method SaveSuper ()
          diskDriver.SynchWriteSector (0,    -- sector to Write
                                       1,    -- number of sectors to read
                                       superBlock)
      endMethod

      --------------- ToyFs . GetDiskInfo  ----------------
    method GetDiskInfo (buffPtr: ptr to diskInfo) returns int
    	var di: diskInfo
	    rv: int
	di.diskSize = fssize
	di.totalInodes = numInodes
	di.freeInodes = i_bitmap.NumberOfClearBits()
	di.totalDblocks = numDblocks
	di.freeDblocks = d_bitmap.NumberOfClearBits()
	rv = currProc.addrSpace.
	       CopyBytesToVirtual (buffPtr asInteger, (&di) asInteger, 20)
	if rv != 20
	   return -1
	else
	   return 0
	endIf
      endMethod

      ----------  ToyFs . LookupFCB --------
      method LookupFCB (inodeNum: int) returns
      	      ptr to FileControlBlock

        var i: int
         for i = 0 to MAX_NUMBER_OF_FILE_CONTROL_BLOCKS-1
            if fcbTable[i].inode.number == inodeNum
              return &fcbTable[i]
            endIf
          endFor
	  return null
        endMethod

     ----------  ToyFs . GetFCB  ----------

      method GetFCB (inodeNum: int ) returns ptr to FileControlBlock
      --
      -- This method is called when opening a file.  It will search
      -- the fcbTable for an entry matching the file, that is the inode number.
      -- If none is found, a new FCB is returned
      --
      -- The file must already exist on the disk.  If it cannot be found,
      -- this method returns null. 
      --
      -- The numberOfUsers field in the FCB is set to one.
      --
      -- This method is reentrant, and may block the caller.
      --
          var
              fcb: ptr to FileControlBlock

          --printIntVar ("GetFCB: inodeNum", inodeNum)

          fsLock.Lock()

          -- See if there is an FCB for this file; if so return it.
	  fcb = self.LookupFCB (inodeNum)
	  if fcb != null
	     fcb.fcbLock.Lock()
             fcb.numberOfUsers = fcb.numberOfUsers + 1
	     fcb.fcbLock.Unlock()
             fsLock.Unlock()
             return fcb
          endIf

          -- Get an unused FCB, waiting until one becomes available
          while fcbFreeList.IsEmpty ()
            anFCBBecameFree.Wait (& fsLock)
          endWhile
          fcb = fcbFreeList.Remove ()

          fcb.numberOfUsers = 1

          -- Safe to unlock now, inode read will provide its own synch 
          fsLock.Unlock()

          -- Check for correctness of new fcb returned 
          if fcb.relativeSectorInBuffer >= 0 || fcb.bufferIsDirty
            FatalError (
	       "In FileManager.Open: a free FCB appears not to have been closed properly")
          endIf

          -- Read the inode ...
	  fcb.inode.GetInode (inodeNum)

	  -- Now return the fcb
          return fcb
        endMethod

     --------------- ToyFs . PrintFCBs  ----------------

      method PrintFCBs ()
        var i: int
          print ("Here is the FileControlBlock table...\n")
          for i = 0 to MAX_NUMBER_OF_FILE_CONTROL_BLOCKS-1
            print ("  ")
            printInt (i)
            print (":  ")
            fcbTable[i].Print()
          endFor
          print ("Here is the FREE list of FileControlBlocks:\n   ")
          fcbFreeList.ApplyToEach (printFCB)
          nl ()
      endMethod

   --------------- ToyFs . OpenLastDir  ----------------

    method OpenLastDir (filename: String, startDir: ptr to OpenFile,
    	   	        lastElIndex: ptr to int) returns ptr to OpenFile
        var
	    elName: array [ MAX_STRING_SIZE ] of char
	    ix : int
	    sIx: int
	    eIx: int
	    sizeP: ptr to int
	    entPtr: ptr to dirEntry
	    elDir: ptr to OpenFile
	    iNode: InodeData
	    fcb: ptr to FileControlBlock

	    elName = new array [ MAX_STRING_SIZE ] of char 
	    	     	 { MAX_STRING_SIZE of '\0' }
	    sizeP = (&elName) asPtrTo int
	    iNode = new InodeData
	    *lastElIndex = -1

	    ix = StrChr (filename, '/', 0)
	    if ix < 0
	       *lastElIndex = 0
	       return startDir.NewReference()
	    endIf

	    if ix == 0
	       elDir = fileSystem.rootDirectory.NewReference()
	       sIx = 1
	       eIx = StrChr(filename, '/', 1)
	    else
	       elDir = startDir.NewReference()
	       eIx = ix
	       sIx = 0
	    endIf

	    -- Loop through
	    while eIx > 0
	      -- Copy File name
	      if eIx - sIx > MAX_STRING_SIZE
	         fileManager.Close(elDir)
		 return null
	      endIf
	      *sizeP = eIx-sIx
	      for ix = 0 to eIx-sIx-1
	         elName[ix] = filename[sIx+ix]
	      endFor

	      -- Get the entry
	      -- print("OpenLastDir: elName: ") print(&elName) nl()
	      entPtr = elDir.Lookup(&elName)
	      if entPtr == null
	          fileManager.Close(elDir)
		  currProc.error = E_No_Entry
		  return null
	      endIf
	      iNode.GetInode(entPtr.inodeNum)
	      if (iNode.mode & TYPE_DIR) != TYPE_DIR
	          fileManager.Close(elDir)
		  currProc.error = E_Not_A_Directory
		  return null
	      endIf

	      -- Get FCB / OpenFile ...
	      fcb = fileSystem.GetFCB(entPtr.inodeNum)
	      fileManager.Close(elDir)
	      if fcb == null
		  currProc.error = E_No_Resource
		 return null
	      endIf

	      -- Get an OpenFile
	      elDir = fileManager.GetAnOpenFile(false)
	      if elDir == null
		  currProc.error = E_No_Resource
		 return null
	      endIf
	      elDir.Init(DIRECTORY,fcb,O_READ|O_WRITE)

	      -- Update for next element
	      sIx = eIx+1
	      eIx = StrChr (filename, '/', sIx)
	    endWhile
	    
	    *lastElIndex = sIx
	    return elDir

      endMethod


      --------------- ToyFs . NameToInodeNum  ----------------

    method NameToInodeNum (filename: String, dir : ptr to OpenFile) returns int
      --
      -- This method takes a name in an kernel string, a starting directory for
      -- relative file names (ones not strting with /) and uses the ToyFs
      -- directories and entries to find the inode number of a file.
      -- Return value of -1 says the name is not found for some reason.
        var 
	    dirEnt: ptr to dirEntry
	    curDir: ptr to OpenFile  -- for walking the tree
	    retVal: int
	    lastElStart: int
	    lastElName: array [ MAX_STRING_SIZE ] of char
	    ix: int

	--print ("NameToInodeNum: looking for ") print (filename) print (" (len is ")
        --printInt (filename arraySize) print (")\n")

	-- Quick check for root dir
        if StrCmp (filename, "/") == 0
	   return 1
        endIf

	-- initialize the search
	if dir.kind != DIRECTORY 
	   FatalError ("NameToInodeNum on non-Directory file.")
	endIf

	-- Start by opening the last directory in the path name
	curDir = self.OpenLastDir (filename, dir, &lastElStart)
	if (curDir == null)
	    return -1
        endIf

	if (filename arraySize - lastElStart > MAX_STRING_SIZE) 
	    fileManager.Close(curDir)
	    return -1
	endIf		

	-- Do the lookup(s) ....
	*((&lastElName) asPtrTo int) = filename arraySize - lastElStart
	for ix = 0 to filename arraySize - lastElStart -1
	   lastElName[ix] = filename[lastElStart+ix]
	endFor
	--print ("NameToInodeNum: last element is: ") print (&lastElName) nl()
        fileManager.fileManagerLock.Lock()
	dirEnt = curDir.Lookup(&lastElName)
        fileManager.fileManagerLock.Unlock()
	fileManager.Close(curDir)

	if dirEnt == null
	   currProc.error = E_No_Entry
	   return -1
	endIf

	retVal = dirEnt.inodeNum
	return retVal
      endMethod

      --------------- ToyFs . AllocInode  ----------------
    method AllocInode () returns int
      var retVal: int
          idata: InodeData
        fsLock.Lock()
        retVal = i_bitmap.FindZeroAndSet()
	if retVal >= 0
	  self.SaveSuper()
	  fsLock.Unlock()
	  idata = new InodeData
	  idata.number = retVal
	  idata.nlinks = 0
	  idata.mode = 0
	  idata.fsize = 0
	  idata.balloc = 0
	  idata.direct = new array [10] of int { 10 of 0 }
	  idata.indir1 = 0
	  idata.indir2 = 0
	  idata.dirty = true
	  idata.indSec = -1
	  idata.WriteInode()
	else
	  fsLock.Unlock()
	  currProc.error = E_No_Resource
	endIf
	return retVal
      endMethod

      --------------- ToyFs . FreeInode  ----------------
    method FreeInode (iNum: int)
        fsLock.Lock()
        i_bitmap.ClearBit(iNum)
	self.SaveSuper()
	fsLock.Unlock()
      endMethod

        --------------- ToyFs . AllocDataBlock  ----------------
    method AllocDataBlock () returns int
      var retVal: int
        fsLock.Lock()
        retVal = d_bitmap.FindZeroAndSet()
	self.SaveSuper()
	fsLock.Unlock()
	return retVal
      endMethod

      --------------- ToyFs . FreeDataBlock  ----------------
    method FreeDataBlock (dbNum: int)
        fsLock.Lock()
        d_bitmap.ClearBit(dbNum)
	self.SaveSuper()
	fsLock.Unlock()
      endMethod

    ----------------- ToyFs . Open  -----------------------
    method Open (filename: String, dir: ptr to OpenFile, flags, mode: int)
      	     returns ptr to OpenFile
      --
      -- This method is called to open a ToyFs file.  It returns pointer to
      -- a newly allocated OpenFile.  It will set its "numberOfUsers"
      -- count to 1.
      --
      -- The file must already exist on the disk.  If it cannot be found,
      -- this method returns null.
      --
      -- This method is reentrant, and may block the caller.
      --
          var open: ptr to OpenFile
              fcb: ptr to FileControlBlock
	      iNum: int
	      isRoot: bool

	  isRoot = StrCmp(filename, "/") == 0 

	  -- Quick check for sanity
	  if rootDirectory == null && !isRoot
	     currProc.error = E_Bad_Address
	     return null
	  endIf

	  -- Get the inode number
	  iNum = self.NameToInodeNum (filename, dir)
	  if iNum < 0
	    -- EXTRA CREDIT 
	    -- Creating a new file NOT IMPLEMENTED
	    currProc.error = E_No_Entry
	    return null
	  endIf

          -- EXTRA CREDIT -- Must we create a new file?
	  -- Check for "must create" NOT IMPLEMENTED

          -- First, get an FCB that points to the file.
          -- This will increment fcb.numberOfUsers if inode is
	  -- already associated with a fcb in use.
          fcb = self.GetFCB (iNum)
          if fcb == null
	    currProc.error = E_No_Resource
            return null
          endIf

	  -- Process Open flags
	  -- Check Permissions -- NOT IMPLEMENTED

          -- Next, allocate an OpenFile, not waiting if necessary.
          open = fileManager.GetAnOpenFile(false)
          if open == null
            currProc.error = E_No_Resource
            fcb.Release()
            return null
          endIf

          -- Connect it to this FCB and set its "numberOfUsers" count.
	  if (fcb.inode.mode & TYPE_FILE) == TYPE_FILE
             open.Init (FILE, fcb, flags & 3)
	  else
	     open.Init (DIRECTORY, fcb, flags & 3)
	  endIf

	  -- Return the pointer to the new open file object

          return open
        endMethod

      --------------- ToyFs . ReadFile  ----------------
    method ReadFile (file: ptr to OpenFile, userBuffer: ptr to char, sizeInBytes: int)  returns int
        var
          copiedSoFar, virtAddr, virtPage, offset, destAddr, thisChunkSize, nextPosInFile: int
        -- Big idea: handle file being in multiple sectors and userBuffer accross multiple pages
        -- validate user pointer
        -- if !Valid_User_Pointer()
        -- handle size errors
        -- print("Reading ") printInt(sizeInBytes) print(" bytes\n")
        -- calculate virtualpage and offset into the page
        virtAddr = userBuffer asInteger
        virtPage = virtAddr / PAGE_SIZE
        offset = virtAddr % PAGE_SIZE
        -- set vars
        nextPosInFile = file.currentPos
        -- print("TESTING123\n")
        -- loop over every page
        while true
          -- compute the size of chuk we will read from the file buffer
          thisChunkSize = PAGE_SIZE - offset
          -- if the file is shorter than the size to read, adjust
          if nextPosInFile + thisChunkSize > file.fcb.inode.fsize
            thisChunkSize = file.fcb.inode.fsize - nextPosInFile
          endIf
          -- if the amount we want to read is less than chunk size, adjust
          if copiedSoFar + thisChunkSize > sizeInBytes
            thisChunkSize = sizeInBytes - copiedSoFar
          endIf
          -- check if we done
          if thisChunkSize <= 0
            --done
            file.currentPos = file.currentPos + copiedSoFar
            return copiedSoFar
          endIf
          -- some error checking
          if virtPage < 0 || virtPage >= currProc.addrSpace.numberOfPages || !currProc.addrSpace.IsValid(virtPage) || !currProc.addrSpace.IsWritable(virtPage)
            currProc.error = E_Bad_Address
        --     print("Something went wrong.\n")
            return -1
          endIf
          destAddr = currProc.addrSpace.ExtractFrameAddr(virtPage) + offset
          -- do the read into destAddr, nextPos in file, chuckSize
          if !file.fcb.SynchRead(destAddr, nextPosInFile, thisChunkSize)
        --     print("SynchRead Failed")
            return -1
          endIf
          currProc.addrSpace.SetDirty(virtPage)
          currProc.addrSpace.SetReferenced(virtPage)
          -- increment
          nextPosInFile = nextPosInFile + thisChunkSize
          copiedSoFar = copiedSoFar + thisChunkSize
          virtPage = virtPage + 1
          offset = 0
          -- check if we done
          if copiedSoFar == sizeInBytes
          file.currentPos = file.currentPos + copiedSoFar
            return copiedSoFar
          endIf
        endWhile
        -- return -1
      endMethod

      --------------- ToyFs . WriteFile  ----------------

    method  WriteFile (file: ptr to OpenFile, userBuffer: ptr to char, sizeInBytes: int)  returns int
	var
          copiedSoFar, virtAddr, virtPage, offset, destAddr, thisChunkSize, nextPosInFile: int
        -- Big idea: handle file being in multiple sectors and userBuffer accross multiple pages
        -- validate user pointer
        -- if !Valid_User_Pointer()
        -- handle size errors
        -- print("Reading ") printInt(sizeInBytes) print(" bytes\n")
        -- calculate virtualpage and offset into the page
        virtAddr = userBuffer asInteger
        virtPage = virtAddr / PAGE_SIZE
        offset = virtAddr % PAGE_SIZE
        -- set vars
        nextPosInFile = file.currentPos
        -- loop over every page
        while true
          -- compute the size of chuk we will read from the file buffer
          thisChunkSize = PAGE_SIZE - offset
          -- if the amount we want to read is less than chunk size, adjust
          if copiedSoFar + thisChunkSize > sizeInBytes
            thisChunkSize = sizeInBytes - copiedSoFar
          endIf
        --   print("\tWRITE: Next chunk size = ") printInt(thisChunkSize) nl()
          -- if the file is shorter than the size to read, adjust
          if nextPosInFile + thisChunkSize > file.fcb.inode.fsize
            -- extend the file
            -- mark the inode as dirty
            file.fcb.inode.dirty = true
            -- update the size of the file
        --     print("\tWRITE: Adding ") printInt(nextPosInFile + thisChunkSize - file.fcb.inode.fsize) print(" bytes to file.\n")
            file.fcb.inode.fsize = nextPosInFile + thisChunkSize
          endIf
          -- check if we done
          if thisChunkSize <= 0
            --done
            file.currentPos = file.currentPos + copiedSoFar
            return copiedSoFar
          endIf
          -- some error checking
          if virtPage < 0 || virtPage >= currProc.addrSpace.numberOfPages || !currProc.addrSpace.IsValid(virtPage) || !currProc.addrSpace.IsWritable(virtPage)
            currProc.error = E_Bad_Address
        --     print("Something went wrong.\n")
            return -1
          endIf
          destAddr = currProc.addrSpace.ExtractFrameAddr(virtPage) + offset
          -- do the write
          if !file.fcb.SynchWrite(destAddr, nextPosInFile, thisChunkSize)
        --     print("SynchRead Failed")
            return -1
          endIf
          currProc.addrSpace.SetDirty(virtPage)
          currProc.addrSpace.SetReferenced(virtPage)
          -- increment
          nextPosInFile = nextPosInFile + thisChunkSize
          copiedSoFar = copiedSoFar + thisChunkSize
          virtPage = virtPage + 1
          offset = 0
          -- check if we done
          if copiedSoFar == sizeInBytes
          file.currentPos = file.currentPos + copiedSoFar
            return copiedSoFar
          endIf
        endWhile
      endMethod

      --------------- ToyFs . CreateFile  ----------------
    method CreateFile (dir : ptr to OpenFile, filename: String, flags: int,
    	               mode: int)  returns ptr to OpenFile
	-- NOT IMPLEMENTED
        return null
      endMethod

    --------------- ToyFs . Stat  ----------------
    method Stat (localName: String, statBuf: ptr to statInfo) returns int
        var
          inode: int
          filecb: ptr to FileControlBlock
          stat: statInfo
          junk: int
        -- get inode number by filename string lookup
        inode = fileSystem.NameToInodeNum(localName, currProc.workingDir)
        if inode == -1
          currProc.error = E_No_Entry
          return -1
        endIf
        -- get the file control blcok with the inode number
        filecb = fileSystem.GetFCB(inode)
        -- fill out the statinfo record
        stat.inodeNum = inode
        stat.nlinks = filecb.inode.nlinks
        stat.mode = filecb.inode.mode
        stat.fsize = filecb.inode.fsize
        stat.balloc = filecb.inode.balloc
        -- print("fsize: ") printInt(stat.fsize) nl()
        -- printInt((&stat) asInteger) nl()
        -- TODO: handle errors & fill out filecb and copybytestovirtual
        junk = currProc.addrSpace.CopyBytesToVirtual((statBuf) asInteger, (&stat) asInteger, sizeOf statInfo)
	return 0
      endMethod

    --------------- ToyFs . ChMode  ----------------
    method  ChMode(localName: String, mode: int) returns int
        -- NOT IMPLEMENTED
        return -1
      endMethod

    --------------- ToyFs . ChDir  ----------------

    method ChDir (dirname: String) returns int
        -- NOT IMPLEMENTED
        return -1
      endMethod

    --------------- ToyFs . ReadDir  ----------------

    method ReadDir (file: ptr to OpenFile, entPtr: ptr to dirEntry) returns int
        var
          de: ptr to dirEntry
          junk: int
        -- check that the file is a directory
        if file.kind != DIRECTORY
          currProc.error = E_Not_A_Directory
          return -1
        endIf
        -- call get next entry
        de = file.GetNextEntry(255)
        if de == null
          currProc.error = E_No_Entry
          return -1
        endIf
        junk = currProc.addrSpace.CopyBytesToVirtual(entPtr asInteger, de asInteger, entSize(255))
	return 0
      endMethod

    --------------- ToyFs . MakeDir  ----------------

    method MakeDir (dirname: String) returns int
	-- NOT IMPLEMENTED,  EXTRA CREDIT
	return -1
      endMethod

      --------------- ToyFs . RemoveDir  ----------------

    method RemoveDir (dirname: String) returns int
        -- NOT IMPLEMENTED,  EXTRA CREDIT
        return -1
      endMethod

      --------------- ToyFs . Link  ----------------

    method Link (oldname, newname: String) returns int
        -- NOT IMIPLEMENTED,  EXTRA CREDIT
 	return -1
      endMethod


      --------------- ToyFs . Unlink   ----------------

    method Unlink (filename: String) returns int
        -- NOT IMPLEMENTED, EXTRA CREDIT
	return -1
      endMethod


  endBehavior


-----------------------------  InodeData         --------------------------------

  behavior InodeData

      ---------- InodeData . Init  -----------
      -- This method is called for each file opened,  each FCB has one
      -- This reads the inode data for the file at init time
      -- theLock should be a pointer to the FileManager.fileManagerLock
      -- bufptr should be a pointer to a frame allocated by the FileMangager
      --        for inode reads/writes  (should be improved!)
      -- num is the inode number
      --
      method Init ()
          -- Nothing is valid, set invalid inode number
          number = -1
        endMethod

      --------------- InodeDate . GetInode ----------------
      --
      -- Gets an inode from the disk
      -- 

      method GetInode ( num : int )
          var inodeSec : int
	      p : ptr to diskInode
              ix : int

	  -- Calculate where to get the inode
	  inodeSec = (num-1) / INODES_PER_SEC
	  fileSystem.fsLock.Lock()

	  -- Read the proper one
	  if (fileSystem.inodeBuffSec != inodeSec)
	     -- Read the proper sector 
            diskDriver.SynchReadSector ( inodeSec + 1,  1,
                       fileSystem.inodeBuffer)
            fileSystem.inodeBuffSec = inodeSec
          endIf

	  -- Point to the diskInode
	  p = (fileSystem.inodeBuffer 
	             + (((num - 1) % INODES_PER_SEC) * INODE_SIZE)) asPtrTo diskInode

          --print ("added = ") printInt (((num - 1) % INODES_PER_SEC) * INODE_SIZE) nl()
          --printIntVar ("num", num)
          --print ("p is 0x") printHex ( p asInteger ) nl()

	  -- Set the fields of this in memory Inode
          number = num
	  nlinks = p.nlinksAndMode >> 16
	  mode   = p.nlinksAndMode & 0xff
	  fsize  = p.fsize
	  balloc = p.balloc
	  direct = new array [10] of int { 10 of 0 }
	  for ix = 0 to 9 
	     direct[ix] = p.direct[ix]
	  endFor
	  indir1 = p.indir1
	  indir2 = p.indir2

	  dirty = false
	  indSec = -1      -- -1 means not in use

	  fileSystem.fsLock.Unlock()

	  --print ("GetInode: ")
	  --self.Print()
        endMethod

      method WriteInode()
          var inodeSec : int
	      p : ptr to diskInode
              ix : int

	  if ! dirty
	     return
	  endIf

	  -- Calculate the location of the inode
	  inodeSec = (number-1) / INODES_PER_SEC

	  -- Read the proper one
	  if (fileSystem.inodeBuffSec != inodeSec)
	     -- Read the proper sector 
            diskDriver.SynchReadSector ( inodeSec + 1,  1,
                       fileSystem.inodeBuffer)
            fileSystem.inodeBuffSec = inodeSec
          endIf

	  -- Point to the diskInode
	  p = (fileSystem.inodeBuffer 
	             + (((number - 1) % INODES_PER_SEC) * INODE_SIZE)) asPtrTo diskInode
          *((&p.direct) asPtrTo int) = 10
          p.nlinksAndMode = nlinks << 16 | mode
	  p.fsize = fsize
	  p.balloc = balloc
	  for ix = 0 to 9
	     p.direct[ix] = direct[ix]
	  endFor
	  p.indir1 = indir1
	  p.indir2 = indir2

	  diskDriver.SynchWriteSector ( inodeSec + 1,  1,
                       fileSystem.inodeBuffer)

	  dirty = false
        endMethod

      method Print()
          var ix : int 
          print ("IN: ")
	  printInt (number) print (" ")
	  if ((mode & TYPE_DIR) == TYPE_DIR)
	    print ("d")
	  else
	    print ("-")
	  endIf
	  if ((mode & MODE_READ) == MODE_READ)
	    print ("r")
	  else
	    print ("-")
	  endIf
	  if ((mode & MODE_WRITE) == MODE_WRITE)
	    print ("w")
	  else
	    print ("-")
	  endIf
	  if ((mode & MODE_EXE) == MODE_EXE)
	    print ("x ")
	  else
	    print ("- ")
	  endIf
	  printInt (nlinks) print (" ")
          printInt (fsize) print (" (")
          printInt (balloc) print (") [")
          for ix = 0 to 9 
             printInt (direct[ix]) 
	     if ix < 9 
	       print (",")
	     else
	       print ("] ")
             endIf
	  endFor
	  printInt (indir1)
	  if (dirty)
             print (" dirty")
	  endIf
          nl()
	  if (indSec != -1 )
	    for ix = 0 to 2047
              if *((indSec + 4*ix) asPtrTo int) != 0 
	         printInt(ix) print("[")
                 printInt (*((indSec + 4*ix) asPtrTo int))  print ("] ")
              endIf
            endFor
            nl()
          endIf
        endMethod

      ----------- InodeData . GetDataSectorNumber () -------------

      -- This is expected to be called with fileManagerLock locked!

      method GetDataSectorNumber ( logicalSector: int ) returns int
        var dbPtr: ptr to int
	  --printIntVar ("GetDataSectorNumber:logicalSector", logicalSector)
       	  if logicalSector < 10 
	      return direct[logicalSector]
          else
              if logicalSector < 2058
	         if indir1 == 0
		    return 0
		 endIf 
	         if indSec <= 0
		    -- Need to load the dbSec
		    self.GetIndirect()
		 endIf
		 dbPtr = (indSec + (logicalSector-10)*4) asPtrTo int
		 return *dbPtr
	      else
	         -- Not implemented
		 FatalError ("Double Indirect not implemented.")
	      endIf
          endIf
     	  return 0
        endMethod

      ----------- InodeData . AllocateNewSector () -------------

      method AllocateNewSector (logicalSector: int) returns bool
          var
            newDataBlock: int
            newIndirBlock: int
            newFrame: int
          -- Allocate a new data block
        --   print("\tALLOCATE: allocating new data block.\n")
          newDataBlock = fileSystem.AllocDataBlock()
          if newDataBlock < 0
        --     print("\tALLOCATE: data block number is less than 0.\n")
            return false
          endIf
          -- update number of blocks and set inode as dirty
          balloc = balloc + 1
          dirty = true
          -- check if the sector is logical or indirect
          if logicalSector < 10
            -- Logical, yay!
            direct[logicalSector] = newDataBlock
            dirty = true
          else
        --     print("\tALLOCATE: indirect.\n")
            -- Indirect, ugh, yuck.
            if indir1 == 0
              -- This is the first indirect, disgusting.
              -- Allocate a new data block
              newIndirBlock = fileSystem.AllocDataBlock()
              if newDataBlock < 0
                fileSystem.FreeDataBlock(newDataBlock)
                balloc = balloc - 1
                -- print("\tALLOCATE: failed to get a new data block.\n")
                return false
              endIf
              -- Save it in inode.indir1
              indir1 = newIndirBlock
              -- Get a new frame, set it to the inode, and zero it
              newFrame = frameManager.GetAFrame()
              indSec = newFrame
              balloc = balloc + 1
              MemoryZero(newFrame, PAGE_SIZE)
              self.WriteInode()
            else
              self.GetIndirect()
            endIf
            -- save the new indirect block into the indirect sector
        --     print ("\tALLOCATE: Saving indirect block ") printInt(logicalSector) print(" into frame ") printHex(newFrame) print(" + ") printHex((logicalSector - 10) * 4) nl()
            *((indSec + ((logicalSector - 10) * 4)) asPtrTo int) = newDataBlock
            self.SaveIndirect()
          endIf
          self.WriteInode()
        --   print("\tALLOCATE: inode written back to disk.\n")
          return true
        endMethod

      ----------- InodeData . GetIndirect () -------------

      method GetIndirect ()
	
	-- read the indirect block
	if indir1 == 0
	   FatalError ("GetIndirect: no indirect block to get.")
	endIf
	indSec = frameManager.GetAFrame() 
	diskDriver.SynchReadSector (indir1 + fileSystem.dataSecOffset, 1, indSec)

	endMethod
  
     ----------- InodeData . SaveIndirect () -------------

      method SaveIndirect ()
	
	   -- read the indirect block
	   if indir1 == 0 || indSec < 0
	      FatalError ("SaveIndirect with no indirect!")
	   endIf
	   diskDriver.SynchWriteSector (indir1 + fileSystem.dataSecOffset, 1, indSec)

	endMethod

      ----------- InodeData . FreeIndirect () -------------

      method FreeIndirect ()

          -- Did we read one?
	  if indSec <= 0
	    return
	  endIf
 	
	  -- Free the frame
	  frameManager.PutAFrame(indSec)
          indSec = -1
        endMethod

      ----------- InodeData . SetMode () -------------

      method SetMode ( newMode: int )
           -- NOT IMPLEMENTED
         endMethod

    endBehavior

-----------------------------  FileControlBlock  ---------------------------------

  behavior FileControlBlock

      ----------  FileControlBlock . Init  ----------
      --
      -- This method is called once at startup time.  It preallocates a buffer
      -- in memory which may be needed when I/O is done on the file.
      --
      method Init ()
          numberOfUsers = 0
          bufferPtr = frameManager.GetAFrame ()
          relativeSectorInBuffer = -1
          bufferIsDirty = false
	  inode = new InodeData
	  fcbLock = new Mutex
	  fcbLock.Init()
         endMethod

      ----------  FileControlBlock . Print  ----------

      method Print ()
          fcbLock.Lock()
          print ("inode.number=")
          printInt (inode.number)
          print (",  numberOfUsers=")
          printInt (numberOfUsers)
          print (",  bufferPtr=")
          printHex (bufferPtr)
          print (",  relativeSectorInBuffer=")
          printInt (relativeSectorInBuffer)
          nl ()
	  print ("Inode: ")
	  inode.Print()
          fcbLock.Unlock()
        endMethod

      ----------  FileControlBlock . ReadSector  ----------

      method ReadSector (newSector: int, allocateNew: bool ) returns bool
 	var dataSector: int       
	  if (newSector == relativeSectorInBuffer)
	     return true
	  endIf
	  if fcbLock.heldBy != onCpuThread
	     FatalError("fcb.ReadSector called without fcbLock held.")
	  endIf
          if bufferIsDirty
	     self.Flush()
	  endIf
	  -- get the new one
	  relativeSectorInBuffer = newSector
	  dataSector = inode.GetDataSectorNumber(relativeSectorInBuffer)
	  if dataSector == 0
	     MemoryZero (bufferPtr, PAGE_SIZE)
	     if allocateNew
	         return  inode.AllocateNewSector(newSector)
             else
                 return  true
             endIf
	  else 
             diskDriver.SynchReadSector (
                        dataSector + fileSystem.dataSecOffset, 1, bufferPtr)
	  endIf
	  return true
        endMethod

     ----------  FileControlBlock . Flush  ----------

      method Flush ()
        --
        -- This method writes out the buffer, if it is dirty.  This method
        -- assumes the caller already holds the fcbLock
        -- 
	var dataSector: int

          if bufferIsDirty
            if relativeSectorInBuffer < 0
              FatalError ("FileManager.Flush: buffer is dirty but relativeSectorInBuffer =  -1")
            endIf
            bufferIsDirty = false
	    dataSector = inode.GetDataSectorNumber(relativeSectorInBuffer)
	    if dataSector == 0
	       FatalError ("FCB.Flush ... no disk segment to flush to...")
	    endIf
            diskDriver.SynchWriteSector (
                       dataSector + fileSystem.dataSecOffset, 1, bufferPtr)
          endIf
        endMethod

    ----------  FileControlBlock . Release  ----------
      --
      -- Decrements the count of users and if no users, recycles this fcb
      -- Must be called with fileSystem.fsLock not locked.
      --

      method Release ()
	 fcbLock.Lock()
         numberOfUsers = numberOfUsers - 1
         if numberOfUsers <= 0
	    -- Delete the file?  -- NOT IMPLEMENTED

	    -- Final close, mark unused and release any indirect frame
	    relativeSectorInBuffer = -1
	    inode.FreeIndirect ()
	    inode.number = -1
	    fcbLock.Unlock()
	    fileSystem.fsLock.Lock()
            fileSystem.fcbFreeList.AddToEnd (self)
            fileSystem.anFCBBecameFree.Signal ( &fileSystem.fsLock )
	    fileSystem.fsLock.Unlock()
	 else
	    fcbLock.Unlock()
         endIf
        endMethod

     ----------  FileControlBlock . SynchRead  ----------

      method SynchRead (targetAddr, bytePos, numBytes: int) returns bool
          --
          -- This method reads "numBytes" from this file and stores
          -- them at the address pointed to by "targetAddr".  If everything
          -- was read okay, it returns TRUE; if problems it returns FALSE.
          --
          -- It reads a page at a time into an internal buffer
          -- by calling "diskDriver.SynchReadSector".
          --
          var sector, offset, posInBuffer, bytesToMove: int
          --printHexVar ("SynchRead called  targetAddr", targetAddr)
          --printIntVar ("                  bytePos", bytePos)
          --printIntVar ("                  numBytes", numBytes)
          fcbLock.Lock()
          if inode.number < 0
            FatalError ("FileControlBlock.SynchRead: file not properly opened")
          endIf
          while numBytes > 0
            -- At this point targetAddr and numBytes tell what work is left to do.
            -- printHexVar ("NEXT MOVE:\n  targetAddr", targetAddr)
            -- printIntVar ("  numBytes", numBytes)
            -- printHexVar ("          ", numBytes)
            -- printIntVar ("  relativeSectorInBuffer", fcb.relativeSectorInBuffer)
            -- printIntVar ("  bytePos", bytePos)
            -- printHexVar ("         ", bytePos)
            sector = bytePos / PAGE_SIZE
            offset = bytePos % PAGE_SIZE
            -- printIntVar ("  sector", sector)
            -- printIntVar ("  offset", offset)
            -- printHexVar ("        ", offset)
            if relativeSectorInBuffer != sector
	        if !self.ReadSector(sector,false)
		   fcbLock.Unlock()
		   return false
		endIf
            endIf
            posInBuffer = bufferPtr + offset
            bytesToMove = Min (numBytes, PAGE_SIZE - offset)
            -- printHexVar ("  MOVING - targetAddr", targetAddr)
            -- printHexVar ("         - source addr (posInBuffer)", posInBuffer)
            -- printIntVar ("         - bytesToMove", bytesToMove)
            MemoryCopy (targetAddr, posInBuffer, bytesToMove)
            targetAddr = targetAddr + bytesToMove
            bytePos = bytePos + bytesToMove
            numBytes = numBytes - bytesToMove
            -- printHexVar ("  NEW targetAddr", targetAddr)
            -- printIntVar ("  NEW bytePos", bytePos)
            -- printHexVar ("             ", bytePos)
            -- printIntVar ("  NEW numBytes", numBytes)
            -- printHexVar ("              ", numBytes)
          endWhile
          fcbLock.Unlock()
          return true
        endMethod

      ----------  FileControlBlock . SynchWrite  ----------

      method SynchWrite (sourceAddr, bytePos, numBytes: int) returns bool
          --
          -- This method reads "numBytes" from the memory address "sourceAddr"
          -- and writes them to the file at "bytePos".  If everything
          -- was written okay, it returns TRUE; if problems it returns FALSE.
          --
          -- It operates on an internal buffer by calling
          -- "diskDriver.SynchReadSector" and "diskDriver.SynchWriteSector".
          --
          var sector, offset, posInBuffer, bytesToMove: int
          -- print ("--------------------\n")
          -- printHexVar ("SynchWrite called  sourceAddr", sourceAddr)
          -- printIntVar ("                   bytePos", bytePos)
          -- printIntVar ("                   numBytes", numBytes)
	  -- inode.Print()
          fcbLock.Lock()
          if inode.number < 0
              FatalError ("FileControlBlock.SynchWrite: file not properly opened")
          endIf
          while numBytes > 0
            -- At this point sourceAddr and numBytes tell what work is left to do.
            -- printHexVar ("NEXT MOVE:\n  sourceAddr", sourceAddr)
            -- printIntVar ("  numBytes", numBytes)
            -- printHexVar ("          ", numBytes)
            -- printIntVar ("  relativeSectorInBuffer", relativeSectorInBuffer)
            -- printIntVar ("  bytePos", bytePos)
            -- printHexVar ("         ", bytePos)
            sector = bytePos / PAGE_SIZE
            offset = bytePos % PAGE_SIZE
            -- printIntVar ("  sector", sector)
            -- printIntVar ("  offset", offset)
            bytesToMove = Min (numBytes, PAGE_SIZE - offset)
            if offset == 0 && bytesToMove == PAGE_SIZE 
	       && bytePos < inode.fsize
              -- No need to read the sector first
              self.Flush()
            elseIf relativeSectorInBuffer != sector
	      -- Read the sector before we do a partial write
	      if !self.ReadSector (sector, true)
                 fcbLock.Unlock()
	         return false
	      endIf
            endIf
            posInBuffer = bufferPtr + offset
            relativeSectorInBuffer = sector
            bufferIsDirty = true
            -- printHexVar ("  MOVING - sourceAddr", sourceAddr)
            -- printHexVar ("         - target (posInBuffer)", posInBuffer)
            -- printIntVar ("         - bytesToMove", bytesToMove)
            MemoryCopy (posInBuffer, sourceAddr, bytesToMove)
            sourceAddr = sourceAddr + bytesToMove
            bytePos = bytePos + bytesToMove
            numBytes = numBytes - bytesToMove
            -- printHexVar ("  NEW sourceAddr", sourceAddr)
            -- printIntVar ("  NEW bytePos", bytePos)
            -- printHexVar ("             ", bytePos)
            -- printIntVar ("  NEW numBytes", numBytes)
            -- printHexVar ("              ", numBytes)
          endWhile
          fcbLock.Unlock()
          -- print ("--------------------\n")
          return true
        endMethod

    endBehavior


   --------------------------  OpenFile  ---------------------------------

   behavior OpenFile

      ----------  OpenFile . Init  ----------

     method Init (fKind: int, fFcb: ptr to FileControlBlock, openFlags: int)
     	  kind = fKind
	  fcb  = fFcb
          currentPos = 0
	  numberOfUsers = 1
	  addPos = -1
	  flags = openFlags
       endMethod


      ----------  OpenFile . Print  ----------

      method Print ()
          print ("    OPEN FILE:   currentPos=")
          printInt (currentPos)
	  print (" numOfUsers=") printInt(numberOfUsers)
          print (", fcb=")
          if fcb
            fcb.Print ()
          else
            print ("null\n")
          endIf
          if pipePtr
            pipePtr.Print()
          endIf
        endMethod

      ----------  OpenFile . NewReference  ----------

      method NewReference () returns ptr to OpenFile
           numberOfUsers = numberOfUsers + 1
	   return self
        endMethod

      ----------  OpenFile . ReadBytes  ----------

      method ReadBytes (targetAddr, numBytes: int) returns bool
          --
          -- This method reads "numBytes" from this file and stores
          -- them at the address pointed to by "targetAddr".  If everything
          -- was read okay, it returns TRUE; if problems it returns FALSE.
          --
          -- This method may block the caller.  This method is reentrant.
          --
          var pos: int
          -- printIntVar ("OpenFile.ReadBytes    currentPos", currentPos)
          fileManager.fileManagerLock.Lock ()
          pos = currentPos
          currentPos = currentPos + numBytes
          fileManager.fileManagerLock.Unlock ()
	  if !fcb
	     return false
	  endIf
          return fcb.SynchRead (targetAddr, pos, numBytes)
        endMethod

      ----------  OpenFile . ReadInt  ----------

      method ReadInt () returns int
          --
          -- Read the next 4 bytes from a file and return it as an integer.
          --
          var i: int
          if ! self.ReadBytes ((&i) asInteger, 4)
            FatalError ("Within ReadInt: ReadBytes failed")
          endIf
          return i
        endMethod

      ----------  OpenFile . LoadExecutable  ----------

      method LoadExecutable (addrSpace: ptr to AddrSpace) returns int
        --
        -- This method reads an executable "a.out" file from the disk, creates
        -- a virtual address space (with all pages resident in memory), and
        -- loads the executable program into the new address space.
        --
        -- The virtual address space will consist of (in this order):
        --     The environment page(s)     see NUMBER_OF_ENVIRONMENT_PAGES
        --     The text page(s)
        --     The data page(s)
        --     The bss page(s)
        --     The stack page(s)           see USER_STACK_SIZE_IN_PAGES
        --
        -- The given "addrSpace" is assumed to be empty; this method will
        -- allocate new frames and initialize the page table.
        --
        -- If all is okay, this method returns the initial PC, which will be
        -- the address of the first word of the first text page.
        --
        -- If any problems arise, this method returns -1.
        --
          var nextVirtPage, addr: int
              textSize, dataSize, bssSize, textStart, dataStart, bssStart: int
              i, textSizeInPages, dataSizeInPages, bssSizeInPages: int
 
          -- Make sure this address space is empty...
          if addrSpace.numberOfPages != 0
            FatalError ("LoadExecutable: This virtual address space is not empty")
          endIf
         
          -- Read and check the magic number...
          if  self.ReadInt () != 0x424C5A78    -- in ASCII: "BLZx"
            print ("LoadExecutable: Bad magic number\n")
            return -1
          endIf

          -- Read in the header info...
          textSize = self.ReadInt ()
          dataSize = self.ReadInt ()
          bssSize = self.ReadInt ()
          textStart = self.ReadInt ()
          dataStart = self.ReadInt ()
          bssStart = self.ReadInt ()

          -- Compute the size of the text segment in pages...
          if textSize % PAGE_SIZE != 0
            print ("LoadExecutable: The text segment size not a multiple of page size\n")
            return -1
          endIf
          textSizeInPages = textSize / PAGE_SIZE

          -- Environment pages are filled in by the OS; make sure the executable
          -- and the OS agree about how many there are to be...
          if textStart != NUMBER_OF_ENVIRONMENT_PAGES * PAGE_SIZE
            print ("LoadExecutable: The environment size does not")
	    print (" match the 'loadAddr' info supplied to the linker\n")
            return -1
          endIf

          -- Compute the size of the data segment in pages...
          if dataSize % PAGE_SIZE != 0
            print ("LoadExecutable: The data segment size not a multiple of page size\n")
            return -1
          endIf
          if dataStart != textStart + textSize
            print ("LoadExecutable: dataStart != textStart + textSize\n")
            return -1
          endIf
          dataSizeInPages = dataSize / PAGE_SIZE

          -- Compute the size of the bss segment in pages...
          if bssSize % PAGE_SIZE != 0
            print ("LoadExecutable: The bss segment size not a multiple of page size\n")
            return -1
          endIf
          if bssStart != dataStart + dataSize
            print ("LoadExecutable: bssStart != dataStart + dataSize\n")
            return -1
          endIf
          bssSizeInPages = bssSize / PAGE_SIZE

          -- Compute how many pages to put into the address space...
          i = textSizeInPages + dataSizeInPages + bssSizeInPages +
              USER_STACK_SIZE_IN_PAGES + NUMBER_OF_ENVIRONMENT_PAGES

          /*****
          printIntVar ("NUMBER_OF_ENVIRONMENT_PAGES", NUMBER_OF_ENVIRONMENT_PAGES)
          printIntVar ("USER_STACK_SIZE_IN_PAGES", USER_STACK_SIZE_IN_PAGES)
          printIntVar ("textSizeInPages", textSizeInPages)
          printIntVar ("dataSizeInPages", dataSizeInPages)
          printIntVar ("bssSizeInPages", bssSizeInPages)
          printIntVar ("addrSpace.numberOfPages", addrSpace.numberOfPages)
          printIntVar ("Number of pages in this address space", i)
          printIntVar ("MAX_PAGES_PER_VIRT_SPACE", MAX_PAGES_PER_VIRT_SPACE)
          *****/

          -- Allocate the frames...
          if i > MAX_PAGES_PER_VIRT_SPACE
            print ("LoadExecutable: This virtual address space exceeds the limit\n")
            printIntVar ("LoadExecutable: Number of pages in this address space", i)
            printIntVar ("LoadExecutable: MAX_PAGES_PER_VIRT_SPACE", MAX_PAGES_PER_VIRT_SPACE)
            return -1
          endIf

          frameManager.GetNewFrames (addrSpace, i)

          --print ("LoadExecutable: The address space just allocated...\n")
          --addrSpace.Print ()

          -- Read and check the separator...
          if  self.ReadInt () != 0x2a2a2a2a
            print ("LoadExecutable: Invalid file format - missing separator (1)\n")
            frameManager.ReturnAllFrames (addrSpace)
            return -1
          endIf

          -- Read the text segment...
          nextVirtPage = textStart / PAGE_SIZE
          for i = 1 to textSizeInPages
            addr = addrSpace.ExtractFrameAddr (nextVirtPage)
            -- printIntVar ("About to read; nextVirtPage", nextVirtPage)
            -- printHexVar ("               addr", addr)
            if ! self.ReadBytes (addr, PAGE_SIZE)
              print ("LoadExecutable: Problems reading from file (text)\n")
              frameManager.ReturnAllFrames (addrSpace)
              return -1
            endIf
            addrSpace.ClearWritable (nextVirtPage)
            nextVirtPage = nextVirtPage + 1
          endFor

          -- Read and check the separator...
          if  self.ReadInt () != 0x2a2a2a2a
            --print ("LoadExecutable: Invalid file format - missing separator (2)\n")
            frameManager.ReturnAllFrames (addrSpace)
            return -1
          endIf

          -- Read the data segment...
          for i = 1 to dataSizeInPages
            addr = addrSpace.ExtractFrameAddr (nextVirtPage)
            -- printIntVar ("About to read; nextVirtPage", nextVirtPage)
            -- printHexVar ("               addr", addr)
            if ! self.ReadBytes (addr, PAGE_SIZE)
              print ("LoadExecutable: Problems reading from file (text)\n")
              frameManager.ReturnAllFrames (addrSpace)
              return -1
            endIf
            nextVirtPage = nextVirtPage + 1
          endFor

          -- Read and check the separator...
          if  self.ReadInt () != 0x2a2a2a2a
            print ("LoadExecutable: Invalid file format - missing separator (3)\n")
            frameManager.ReturnAllFrames (addrSpace)
            return -1
          endIf

          -- Zero out the bss segment...
          addr = addrSpace.ExtractFrameAddr (nextVirtPage)
          -- printIntVar ("About to zero bss segment; page", nextVirtPage)
          -- printHexVar ("                           addr", addr)
          -- printHexVar ("                           bssSizeInBytes", bssSize)
          MemoryZero (addr, bssSize)

          -- User programs begin execution at the first word of the text segment...
          return textStart
        endMethod


      ----------  OpenFile . Lookup  ----------

      method Lookup ( filename: String)
     	     returns ptr to dirEntry
	  var ent: ptr to dirEntry

            if kind != DIRECTORY
	      FatalError ("Lookup on a non-Directory file.")
 	    endIf

	     -- Start at beginning
	     currentPos = 0
	     addPos = -1
	     ent = self.GetNextEntry(filename arraySize)
	     while ent != null
	        if StrCmp (filename, &ent.name) == 0
		   return ent
		endIf
		ent = self.GetNextEntry(filename arraySize)
	     endWhile
	     
	     -- Not found
	     return null
	endMethod

      ----------  OpenFile . GetNextEntry  ----------

      -- newSize -> used during lookup to keep a pointer
      -- to where an entry of newSize characters may be inserted

      method GetNextEntry (newSize: int) returns ptr to dirEntry
         var sec: int
	     offset: int
	     retVal: ptr to dirEntry

           if kind != DIRECTORY
	      FatalError ("GetNextEntry on a non-Directory file.")
	   endIf

	   sec = currentPos / PAGE_SIZE
	   offset = currentPos % PAGE_SIZE

	   fcb.fcbLock.Lock()
	   if fcb.relativeSectorInBuffer != sec
	      -- print ("Need to load new sector!\n")
	      if !fcb.ReadSector(sec, false)
	        currProc.error = E_No_Entry
	        return null
	      endIf
	   endIf
	   fcb.fcbLock.Unlock()

	   -- Point to an entry in the buffer	   
	   retVal = (fcb.bufferPtr + offset) asPtrTo dirEntry

	   -- End of directory?
	   if retVal.inodeNum == -1
	     currProc.error = E_No_Entry
	     return null
	   endIf

	   -- End of Sector?
	   if retVal.inodeNum == 0

	     -- Can we save a new entry here?
	     if addPos == -1 && offset <= PAGE_SIZE - entSize(newSize)
	     	addPos = currentPos
	     endIf

	     -- Get Next sector
	     sec = sec + 1
	     offset = 0
	     currentPos = sec * PAGE_SIZE
	     
	     retVal = (fcb.bufferPtr + offset) asPtrTo dirEntry
	     if retVal.inodeNum == -1
	       currProc.error = E_No_Entry
	       return null
	     endIf

	   endIf

	   -- Update Current pointer
	   currentPos = currentPos + entSize(retVal.name arraySize)
	   
           return retVal
	endMethod

      ----------  OpenFile . AddEntry  ----------

      method AddEntry (inodeNum: int, filename: String) returns bool
        var 
	   ent: ptr to dirEntry
	   pi: ptr to int
	   sec: int
	   offset: int
	   save: int

	   -- Sanity check
           if kind != DIRECTORY
	      FatalError ("AddEntry on a non-Directory file.")
	   endIf

	   -- Check permissions
	   if (fcb.inode.mode & MODE_WRITE) != MODE_WRITE
	     currProc.error =  E_Permissions
	     return false
	   endIf

	   -- See if it exists already
           fileManager.fileManagerLock.Lock()
	   ent = self.Lookup (filename)
           fileManager.fileManagerLock.Lock()
	   if ent != null
	      -- print ("AddEntry: found name ") print(filename) nl()
	      return false
	   endIf

	   -- Check addPos ...
	   if addPos < 0
	      addPos = fcb.inode.fsize - 4
	   endIf

	   -- Now add the the entry, addPos should be set to
	   sec = addPos / PAGE_SIZE
	   offset = addPos % PAGE_SIZE
	   -- Make sure the correct sector is loaded
	   fcb.fcbLock.Lock()
	   if fcb.relativeSectorInBuffer != sec
	      -- print ("Need to load new sector!\n")
	      if !fcb.ReadSector(sec, true)
	        return false
	      endIf
	   endIf

	   -- the location in the directory that the filename will fit
	   ent = (fcb.bufferPtr + offset) asPtrTo dirEntry
	   if ent.inodeNum != 0 && ent.inodeNum != -1
	      FatalError ("OpenFile.AddEntry incorrectly set addPos")
	   endIf

	   -- Special case: -1 and not enough room in the current
	   -- sector.
	   if ent.inodeNum == -1 && entSize(filename arraySize) > PAGE_SIZE - offset
	        -- don't use indirect block for directories ...
	        if sec == 9 || ! fcb.inode.AllocateNewSector(sec+1)
		   return false
		endIf
	        ent.inodeNum = 0
		fcb.bufferIsDirty = true
		fcb.Flush()
		sec = sec + 1
		offset = 0
		MemoryZero (fcb.bufferPtr, PAGE_SIZE)
		ent = fcb.bufferPtr asPtrTo dirEntry
		ent.inodeNum = -1
		currentPos = (sec-1) * PAGE_SIZE
		fcb.inode.fsize = currentPos+4
		fcb.inode.dirty = true
		fcb.relativeSectorInBuffer = sec
	   endIf

	   -- Now add the new entry.
	   -- print ("AddEntry: ") print (filename) nl()
	   save = ent.inodeNum
	   ent.inodeNum = inodeNum
	   pi = ent asPtrTo int
	   *(pi+4) = filename arraySize
	   StrCopy(&ent.name, filename)
	   fcb.bufferIsDirty = true
	   offset = offset + entSize(filename arraySize)
	   ent = (fcb.bufferPtr + offset) asPtrTo dirEntry
	   ent.inodeNum = save
	   currentPos = currentPos + entSize(filename arraySize)
	   if currentPos+4 > fcb.inode.fsize
	      fcb.inode.fsize = currentPos+4
	      fcb.inode.dirty = true
	      fcb.inode.WriteInode()
           endIf
	   
	   fcb.Flush()
	   fcb.fcbLock.Unlock()
           return true
	endMethod


     -- Lookup must have been the last operation and the ent
     -- should be the value returned from a successfult Lookup
   
     method RemoveEntry (filename: String, ent: ptr to dirEntry) returns bool
        var 
	    offset: int
	    entSz: int
	    cpySz: int

	   -- Sanity check
           if kind != DIRECTORY
	      FatalError ("RemoveEntry on a non-Directory file.")
	   endIf

	   -- print ("OpenFile:RemoveEntry -> ") print(filename) nl()
	   if (StrCmp(filename,".") == 0) ||  (StrCmp(filename,"..") == 0)
	      return false
	   endIf

	   fileManager.fileManagerLock.Lock()
	   offset = (ent asInteger) - fcb.bufferPtr
	   if offset < 0 || offset >= PAGE_SIZE
	       fileManager.fileManagerLock.Unlock()
	       print ("RemoveEntry Bug!\n")
	       return false
	   endIf

	   -- Update Current pointer to location of entry
	   entSz =  entSize(ent.name arraySize)
	   currentPos = currentPos - entSz
           fileManager.fileManagerLock.Unlock()
	   
	   -- calculate how much to move
	   fcb.fcbLock.Lock()
	   if fcb.inode.fsize - currentPos < PAGE_SIZE - offset
	      cpySz = fcb.inode.fsize - currentPos - entSz
	   else
	      cpySz = PAGE_SIZE - offset
	   endIf

	   --printIntVar("offset", offset) 
	   --printIntVar ("currentPos", currentPos) 
	   --printIntVar ("cpySz", cpySz)

	   MemoryCopy (fcb.bufferPtr+offset, fcb.bufferPtr+offset+entSz, cpySz)
	   fcb.bufferIsDirty = true
	   if fcb.inode.fsize - currentPos < PAGE_SIZE - offset
	      fcb.inode.fsize = fcb.inode.fsize - entSz
	      fcb.inode.dirty = true
	      fcb.inode.WriteInode()
	   endIf
	   fcb.Flush()
	   fcb.fcbLock.Unlock()

	   -- Delete the last block?  <Needs to be implemented>

           return true
        endMethod

      ----------  OpenFile . Seek  ----------

      -- Seek to a byte position in a file or reset (via 0) a directory
      method Seek (newPos: int) returns int
          var
            fsize: int
          -- verify file or directory
          if kind != FILE && kind != DIRECTORY
        --     print("ERROR: Not a file or directory.\n")
            currProc.error = E_Bad_Value
            return -1
          endIf
          -- lock filemanager
          fileManager.fileManagerLock.Lock()
          -- validate the new position
          fsize = fcb.inode.fsize
          if kind == FILE
            -- -1 thorugh file len is valid
            if newPos < -1 || newPos > fsize
        --       print("ERROR: Seek out of bounds.\n")s
              fileManager.fileManagerLock.Unlock()
              currProc.error = E_Bad_Value
              return -1
            endIf
          else
            -- 0 is the only valid input
            if newPos != 0
        --       print("ERROR: Cannot seek dir there.\n")
              fileManager.fileManagerLock.Unlock()
              currProc.error = E_Bad_Value
              return -1
            endIf
          endIf
          -- set the new position
          if newPos == 0
            -- seek the beginning of the file
            newPos = 0
          elseIf newPos == -1
            -- seek the end of the file
            newPos = fsize
          else
            -- normal seek
            -- newPos = newPos + currentPos
          endIf
          -- just seek already
          currentPos = newPos
          -- unlock filemanager
          fileManager.fileManagerLock.Unlock()
          return newPos
        endMethod

  endBehavior

  --------------------  SerialDriver ---------------------

  behavior SerialDriver

    ------------------- SerialDriver.Init -----------------

    method Init()
        print ("Initializing Serial Driver\n")
        -- init mutex
        serialLock = new Mutex
        serialLock.Init()
        -- init semaphores for producer/consumer
        putBufferFreeSem = new Semaphore
        putBufferFreeSem.Init(SERIAL_PUT_BUFFER_SIZE)
        putBufferUsedSem = new Semaphore
        putBufferUsedSem.Init(0)
        getBufferFreeSem = new Semaphore
        getBufferFreeSem.Init(SERIAL_GET_BUFFER_SIZE)
        getBufferUsedSem = new Semaphore
        getBufferUsedSem.Init(0)

        -- init semaphore for interupt
        serialNeedsAttention = new Semaphore
        serialNeedsAttention.Init(0)

        -- init the arrays
        putBuffer = new array of char{ SERIAL_PUT_BUFFER_SIZE of '\0' }
        getBuffer = new array of char{ SERIAL_GET_BUFFER_SIZE of '\0' }

        -- set the defuault values of the getters and setters
        putBufferSize = 0
        putBufferNextIn = 0
        putBufferNextOut = 0
        getBufferSize = 0
        getBufferNextIn = 0
        getBufferNextOut = 0

        -- set the default pointer values
        serial_data_word_address = SERIAL_DATA_WORD_ADDRESS asPtrTo int
        serial_status_word_address = SERIAL_STATUS_WORD_ADDRESS asPtrTo int

        -- init the serial handler thread
        serialHandlerThread = new Thread
        serialHandlerThread.Init("serial handler thread")
        serialHandlerThread.Fork(StartSerialHandler, 0)

        -- VERY LAST THING, set initialized to true
        initialized = true

        return
      endMethod

    ------------------- SerialDriver . Read -----------------

    method Read (buffer: ptr to char, sizeInBytes: int) returns int
        var
          bytesRead, physPage, physAddr, virtPage, offset: int
          data: char
        -- calc
        virtPage = (buffer asInteger) / PAGE_SIZE
        offset = (buffer asInteger) % PAGE_SIZE
        physPage = currProc.addrSpace.ExtractFrameAddr(virtPage)
        currProc.addrSpace.SetDirty(virtPage)
        currProc.addrSpace.SetReferenced(virtPage)
        while bytesRead < sizeInBytes
          physAddr = physPage + offset
          data = self.GetChar()
          if data == '\n'
            -- return the newline
            *(physAddr asPtrTo char) = data
            bytesRead = bytesRead + 1
            return bytesRead
          elseIf data == '\r'
            -- replace with newline and return
            *(physAddr asPtrTo char) = '\n'
            bytesRead = bytesRead + 1
            return bytesRead
          elseIf data == 0x04
            -- return without EOF
            return bytesRead
          else
            *(physAddr asPtrTo char) = data
            bytesRead = bytesRead + 1
          endIf
          -- more calc
          offset = (offset + 1) % PAGE_SIZE
          if offset == 0
            virtPage = virtPage + 1
            physPage = currProc.addrSpace.ExtractFrameAddr(virtPage)
          endIf
        endWhile
        return bytesRead
      endMethod

    ------------------- SerialDriver . Write -----------------

    method Write (buffer: ptr to char, sizeInBytes: int) returns int
        var
          bytesWritten, physPage, physAddr, virtPage, offset: int
          data: char
        -- calc
        virtPage = (buffer asInteger) / PAGE_SIZE
        offset = (buffer asInteger) % PAGE_SIZE
        physPage = currProc.addrSpace.ExtractFrameAddr(virtPage)
        while bytesWritten < sizeInBytes
          physAddr = physPage + offset
          data = *(physAddr asPtrTo char)
          if data == '\n'
            -- write a carrige return
            self.PutChar('\r')
          endIf
          self.PutChar(data)
          bytesWritten = bytesWritten + 1
          -- more calc
          offset = (offset + 1) % PAGE_SIZE
          if offset == 0
            virtPage = virtPage + 1
            physPage = currProc.addrSpace.ExtractFrameAddr(virtPage)
          endIf
        endWhile
        return bytesWritten
      endMethod


    ------------------- SerialDriver.PutChar -----------------

    method PutChar(value: char)
        -- var i: int
        -- PRODUCER
        -- down on the free semaphore, meaning there is one less space in the buffer
        putBufferFreeSem.Down()
        -- aquire lock
        serialLock.Lock()
        -- print some debug info
        -- print("\tPutChar envoked. nextIn = ") printInt(putBufferNextIn) print(" nextOut = ") printInt(putBufferNextOut) nl()
        -- for i = 0 to SERIAL_PUT_BUFFER_SIZE - 1
        --   printInt(i) print(":") printHex(putBuffer[i]) print(" ")
        -- endFor
        -- nl()
        -- add char to the buffer
        putBuffer[putBufferNextIn] = value
        -- increment the input index
        putBufferNextIn = (putBufferNextIn + 1) % SERIAL_PUT_BUFFER_SIZE
        putBufferSize = putBufferSize + 1
        -- release lock
        serialLock.Unlock()
        -- up on the used semaphore
        putBufferUsedSem.Up()
      endMethod

    ------------------- SerialDriver.GetChar -----------------

    method GetChar () returns char
        var
          retVal: char
        --   i: int
        -- CONSUMER
        -- down on the used semaphore
        getBufferUsedSem.Down()
        -- aquire the lock
        serialLock.Lock()
        -- print some debug info
        -- print("\tGetChar envoked. nextIn = ") printInt(getBufferNextIn) print(" nextOut = ") printInt(getBufferNextOut) nl()
        -- for i = 0 to SERIAL_GET_BUFFER_SIZE - 1
        --   printInt(i) print(":") printHex(getBuffer[i]) print(" ")
        -- endFor
        -- nl()
        -- get the char, increment the next pos
        retVal = getBuffer[getBufferNextOut]
        getBufferNextOut = (getBufferNextOut + 1) % SERIAL_GET_BUFFER_SIZE
        getBufferSize = getBufferSize - 1
        -- release lock
        serialLock.Unlock()
        -- up on the free semaphore
        getBufferFreeSem.Up()
        return retVal
      endMethod

    ------------------- SerialDriver.SerialHandler -----------------

    method SerialHandler ()
    var i: int
      -- infiniate loop
      while true
        -- wait on serial interrupt
        serialNeedsAttention.Down()
        -- check if there is a keypress to read
        if (*serial_status_word_address & SERIAL_CHARACTER_AVAILABLE_BIT) != 0
          -- print("***** detected char to read\n")
          -- aquire lock
          serialLock.Lock()
          -- check if there is space in the buffer
          if getBufferSize < SERIAL_GET_BUFFER_SIZE
            -- PRODUCER
            -- down on the free semaphore
            getBufferFreeSem.Down()
            -- put the charachter
            i = (*serial_data_word_address)
            i = i << 24
            getBuffer[getBufferNextIn] = *((&i) asPtrTo char)
            -- increment index and size
            getBufferNextIn = (getBufferNextIn + 1) % SERIAL_GET_BUFFER_SIZE
            getBufferSize = getBufferSize + 1
            -- up on the used semaphore
            getBufferUsedSem.Up()
          else
            print("***** Read buffer overflow. *****\n")
          endIf
          -- release lock
          serialLock.Unlock()
        endIf
        -- check if we can write
        if (*serial_status_word_address & SERIAL_OUTPUT_READY_BIT) != 0
          -- aquire lock
          serialLock.Lock()
          -- check if there are characters in the buffer
          if putBufferSize > 0
            -- CONSUMER
            -- down on the used semaphore
            putBufferUsedSem.Down()
            -- write the character
            *serial_data_word_address = putBuffer[putBufferNextOut]
            -- increment the index and decrement the size
            putBufferNextOut = (putBufferNextOut + 1) % SERIAL_PUT_BUFFER_SIZE
            putBufferSize = putBufferSize - 1
            -- up on the free semaphore
            putBufferFreeSem.Up()
          endIf
          -- release lock
          serialLock.Unlock()
        endIf
      endWhile
      endMethod

  endBehavior

  -- Helper function for Serial Driver 
  -- can not pass a Method as a parameter

  function StartSerialHandler (arg:int)
     serialDriver.SerialHandler()
     FatalError ("Returned from SerialHandler")
  endFunction

------------------------------- Pipes ---------------------------------------

  behavior Pipe


    -------------------  Pipe . Init  -----------------
    method Init ()
 	-- NOT IMPLEMENTED
      endMethod

    -------------------  Pipe . Print  -----------------
    method Print ()
        -- NOT IMPLEMENTED
      endMethod

    -------------------  Pipe . Open  -----------------
    method Open () returns bool
        -- NOT IMPLEMENTED
        return false
      endMethod

    -------------------  Pipe . Read  -----------------
    method Read (buffer: ptr to char, sizeInBytes: int) returns int
        -- NOT IMPLEMENTED
	return -1
      endMethod

    -------------------  Pipe . Write  -----------------
    method Write (buffer: ptr to char, sizeInBytes: int) returns int
        -- NOT IMPLEMENTED
	return -1
      endMethod

    -------------------  Pipe . Close  -----------------
    ---- Assumes fileManagerLock is locked.
    method Close ()
        -- NOT IMPLEMENTED
      endMethod

  endBehavior


endCode
